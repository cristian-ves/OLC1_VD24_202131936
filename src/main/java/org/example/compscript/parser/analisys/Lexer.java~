// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.jflex

// Declarations
package org.example.compscript.parser.analisys;

import java_cup.runtime.*;
import java.util.LinkedList;
import org.example.compscript.parser.exceptions.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\41\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\3\41\1\56\1\57\1\60"+
    "\1\61\1\62\1\0\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\63\1\46\1\47\1\41\1\50\1\51\1\64\1\53"+
    "\1\54\1\55\3\41\1\65\1\66\1\67\7\0\1\3"+
    "\252\0\2\70\115\0\1\71\u01a8\0\2\3\u0100\0\1\72"+
    "\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\21\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\2\1\1\32\1\0"+
    "\1\33\1\0\1\34\3\0\1\35\1\0\1\36\1\37"+
    "\1\40\1\24\2\41\6\24\1\42\4\24\1\43\4\24"+
    "\1\0\12\24\1\44\1\43\3\0\1\45\1\0\1\46"+
    "\4\24\1\0\5\24\1\0\1\24\1\47\1\50\1\51"+
    "\1\24\1\52\1\24\1\0\1\53\1\24\1\54\5\24"+
    "\1\55\3\24\1\0\1\24\1\0\1\51\1\55\1\0"+
    "\1\56\1\24\1\57\1\24\2\60\1\61\2\24\1\0"+
    "\2\24\2\62\1\0\1\24\2\63\10\24\1\0\1\64"+
    "\2\65\1\24\2\0\1\24\2\66\1\24\1\67\1\24"+
    "\2\0\1\67\2\24\1\64\1\24\1\70\3\24\1\71"+
    "\3\24\1\0\2\72\1\0\1\73\2\24\2\0\1\24"+
    "\1\74\1\75\1\76\1\77\1\24\1\0\1\24\1\100"+
    "\1\101\1\100\1\101\1\102\1\24\1\0\1\102\1\103"+
    "\2\104\1\24\1\0\2\105\2\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\73\0\73\0\u0127"+
    "\0\u0162\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\u019d\0\u01d8\0\73\0\73\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\73\0\73\0\73\0\73\0\u06af\0\73\0\u06ea\0\u0725"+
    "\0\73\0\354\0\73\0\u0760\0\73\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\73\0\73\0\73\0\u08c2\0\u0461\0\73"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0461\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\73\0\73\0\u0efb\0\u0f36\0\u0f71"+
    "\0\73\0\u0fac\0\u0887\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u0461"+
    "\0\u0461\0\u0461\0\u12ab\0\u0461\0\u12e6\0\u1321\0\u0461\0\u135c"+
    "\0\u0461\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u0461\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\73\0\73\0\u1620"+
    "\0\73\0\u165b\0\u0461\0\u1696\0\u0461\0\73\0\u0461\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u0461\0\73\0\u17f8\0\u1833"+
    "\0\u0461\0\73\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u0461\0\u0461\0\73\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u0461\0\73\0\u1b6d\0\u0461\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\73\0\u1c59\0\u1c94\0\73\0\u1ccf\0\u0461\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u0461\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u0461"+
    "\0\73\0\u1ea7\0\u0461\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u0461\0\u0461\0\u0461\0\u0461\0\u2009\0\u2044\0\u207f\0\u0461"+
    "\0\u0461\0\73\0\73\0\u0461\0\u20ba\0\u20f5\0\73\0\u0461"+
    "\0\u0461\0\73\0\u2130\0\u216b\0\u0461\0\73\0\u0461\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\37\1\41\1\42\2\37\1\43\1\44\1\45\1\46"+
    "\1\37\1\47\1\50\1\51\1\2\1\52\1\53\2\37"+
    "\1\46\1\54\1\55\1\56\1\57\1\60\1\2\74\0"+
    "\2\3\116\0\1\61\44\0\5\62\1\63\51\62\1\64"+
    "\13\62\10\0\1\65\62\0\11\66\1\0\45\66\1\67"+
    "\13\66\14\0\1\70\4\0\1\71\71\0\1\72\1\0"+
    "\1\22\76\0\1\73\72\0\1\74\72\0\1\75\66\0"+
    "\1\37\5\0\17\37\1\76\1\37\1\77\4\37\4\0"+
    "\3\37\4\0\1\100\23\0\1\37\5\0\16\37\1\101"+
    "\1\37\1\102\5\37\4\0\3\37\30\0\1\37\5\0"+
    "\1\103\6\37\1\104\6\37\1\105\7\37\4\0\3\37"+
    "\30\0\1\37\5\0\4\37\1\106\11\37\1\107\7\37"+
    "\4\0\3\37\30\0\1\37\5\0\13\37\1\110\12\37"+
    "\4\0\3\37\30\0\1\37\5\0\1\111\15\37\1\112"+
    "\7\37\4\0\3\37\30\0\1\37\5\0\4\37\1\113"+
    "\21\37\4\0\3\37\30\0\1\37\5\0\26\37\4\0"+
    "\3\37\30\0\1\37\5\0\5\37\1\114\7\37\1\115"+
    "\10\37\4\0\1\37\1\115\1\37\30\0\1\37\5\0"+
    "\4\37\1\116\3\37\1\117\5\37\1\120\7\37\4\0"+
    "\3\37\3\0\1\121\24\0\1\37\5\0\1\122\25\37"+
    "\4\0\3\37\30\0\1\37\5\0\16\37\1\123\7\37"+
    "\4\0\3\37\30\0\1\37\5\0\4\37\1\124\11\37"+
    "\1\125\4\37\1\126\2\37\4\0\3\37\30\0\1\37"+
    "\5\0\4\37\1\127\15\37\1\130\3\37\4\0\2\37"+
    "\1\130\30\0\1\37\5\0\20\37\1\131\5\37\4\0"+
    "\3\37\30\0\1\37\5\0\16\37\1\132\7\37\4\0"+
    "\3\37\30\0\1\37\5\0\7\37\1\133\16\37\4\0"+
    "\3\37\74\0\1\134\41\0\1\135\7\0\1\136\15\0"+
    "\1\136\43\0\1\137\15\0\1\140\11\0\1\140\13\0"+
    "\1\62\3\0\1\62\45\0\1\62\3\0\2\62\17\0"+
    "\1\141\66\0\1\66\3\0\1\66\45\0\1\66\3\0"+
    "\2\66\6\0\14\70\1\142\56\70\2\71\2\0\67\71"+
    "\22\0\1\143\72\0\1\37\5\0\17\37\1\144\6\37"+
    "\4\0\3\37\30\0\1\37\5\0\16\37\1\145\7\37"+
    "\4\0\3\37\30\0\1\37\5\0\4\37\1\146\21\37"+
    "\4\0\3\37\30\0\1\37\5\0\21\37\1\147\4\37"+
    "\4\0\3\37\4\0\1\150\23\0\1\37\5\0\1\151"+
    "\25\37\4\0\3\37\30\0\1\37\5\0\15\37\1\152"+
    "\10\37\4\0\1\37\1\152\1\37\30\0\1\37\5\0"+
    "\5\37\1\153\20\37\4\0\3\37\30\0\1\37\5\0"+
    "\23\37\1\154\2\37\4\0\3\37\30\0\1\37\5\0"+
    "\21\37\1\155\4\37\4\0\3\37\4\0\1\156\23\0"+
    "\1\37\5\0\13\37\1\157\12\37\4\0\3\37\30\0"+
    "\1\37\5\0\20\37\1\160\5\37\4\0\3\37\30\0"+
    "\1\37\5\0\22\37\1\161\3\37\4\0\2\37\1\161"+
    "\30\0\1\37\5\0\22\37\1\162\3\37\4\0\2\37"+
    "\1\162\30\0\1\37\5\0\15\37\1\163\4\37\1\164"+
    "\3\37\4\0\1\37\1\163\1\164\30\0\1\37\5\0"+
    "\21\37\1\165\4\37\4\0\3\37\4\0\1\166\23\0"+
    "\1\37\5\0\6\37\1\167\17\37\4\0\3\37\57\0"+
    "\1\166\17\0\1\166\23\0\1\37\5\0\22\37\1\170"+
    "\3\37\4\0\2\37\1\170\30\0\1\37\5\0\17\37"+
    "\1\171\6\37\4\0\3\37\30\0\1\37\5\0\14\37"+
    "\1\172\5\37\1\173\1\37\1\174\1\37\4\0\2\37"+
    "\1\173\30\0\1\37\5\0\23\37\1\175\2\37\4\0"+
    "\3\37\30\0\1\37\5\0\15\37\1\176\10\37\4\0"+
    "\1\37\1\176\1\37\30\0\1\37\5\0\22\37\1\177"+
    "\3\37\4\0\2\37\1\177\30\0\1\37\5\0\20\37"+
    "\1\200\5\37\4\0\3\37\30\0\1\37\5\0\23\37"+
    "\1\201\2\37\4\0\3\37\30\0\1\37\5\0\10\37"+
    "\1\202\15\37\4\0\3\37\3\0\1\203\24\0\1\37"+
    "\5\0\10\37\1\204\15\37\4\0\3\37\3\0\1\205"+
    "\54\0\1\206\11\0\1\206\60\0\1\207\11\0\1\207"+
    "\56\0\1\210\22\0\14\70\1\142\4\70\1\211\51\70"+
    "\22\0\1\37\5\0\4\37\1\212\21\37\4\0\3\37"+
    "\30\0\1\37\5\0\13\37\1\213\12\37\4\0\3\37"+
    "\30\0\1\37\5\0\1\214\25\37\4\0\3\37\30\0"+
    "\1\37\5\0\22\37\1\215\3\37\4\0\2\37\1\215"+
    "\60\0\1\216\11\0\1\216\30\0\1\37\5\0\20\37"+
    "\1\217\5\37\4\0\3\37\30\0\1\37\5\0\21\37"+
    "\1\220\1\221\3\37\4\0\2\37\1\221\4\0\1\222"+
    "\23\0\1\37\5\0\1\223\25\37\4\0\3\37\30\0"+
    "\1\37\5\0\1\37\1\224\24\37\4\0\3\37\30\0"+
    "\1\37\5\0\4\37\1\225\21\37\4\0\3\37\42\0"+
    "\1\226\60\0\1\37\5\0\21\37\1\201\4\37\4\0"+
    "\3\37\4\0\1\227\23\0\1\37\5\0\6\37\1\230"+
    "\17\37\4\0\3\37\30\0\1\37\5\0\22\37\1\231"+
    "\3\37\4\0\2\37\1\231\60\0\1\232\11\0\1\232"+
    "\30\0\1\37\5\0\2\37\1\233\23\37\4\0\3\37"+
    "\30\0\1\37\5\0\16\37\1\234\7\37\4\0\3\37"+
    "\30\0\1\37\5\0\23\37\1\235\2\37\4\0\3\37"+
    "\30\0\1\37\5\0\4\37\1\236\21\37\4\0\3\37"+
    "\30\0\1\37\5\0\15\37\1\237\10\37\4\0\1\37"+
    "\1\237\1\37\30\0\1\37\5\0\26\37\4\0\1\240"+
    "\2\37\30\0\1\37\5\0\10\37\1\241\12\37\1\242"+
    "\2\37\4\0\3\37\3\0\1\243\24\0\1\37\5\0"+
    "\4\37\1\244\21\37\4\0\3\37\30\0\1\37\5\0"+
    "\3\37\1\245\22\37\4\0\3\37\41\0\1\246\61\0"+
    "\1\37\5\0\13\37\1\247\12\37\4\0\3\37\51\0"+
    "\1\250\67\0\1\243\12\0\1\251\14\0\1\243\24\0"+
    "\1\37\5\0\15\37\1\252\10\37\4\0\1\37\1\252"+
    "\1\37\30\0\1\37\5\0\12\37\1\253\13\37\4\0"+
    "\3\37\5\0\1\254\22\0\1\37\5\0\16\37\1\255"+
    "\3\37\1\256\3\37\4\0\2\37\1\256\30\0\1\37"+
    "\5\0\10\37\1\257\15\37\4\0\3\37\3\0\1\260"+
    "\50\0\1\261\3\0\1\262\11\0\1\262\30\0\1\37"+
    "\5\0\23\37\1\263\2\37\4\0\3\37\30\0\1\37"+
    "\5\0\13\37\1\264\12\37\4\0\3\37\42\0\1\265"+
    "\60\0\1\37\5\0\22\37\1\266\3\37\4\0\2\37"+
    "\1\266\30\0\1\37\5\0\7\37\1\267\16\37\4\0"+
    "\3\37\30\0\1\37\5\0\24\37\1\270\1\37\4\0"+
    "\3\37\30\0\1\37\5\0\20\37\1\271\5\37\4\0"+
    "\3\37\30\0\1\37\5\0\20\37\1\272\5\37\4\0"+
    "\3\37\30\0\1\37\5\0\3\37\1\273\22\37\4\0"+
    "\3\37\30\0\1\37\5\0\14\37\1\274\11\37\4\0"+
    "\3\37\30\0\1\37\5\0\15\37\1\275\10\37\4\0"+
    "\1\37\1\275\1\37\30\0\1\37\5\0\2\37\1\276"+
    "\23\37\4\0\3\37\53\0\1\277\15\0\1\277\31\0"+
    "\1\37\5\0\4\37\1\300\21\37\4\0\3\37\42\0"+
    "\1\301\70\0\1\302\62\0\1\37\5\0\3\37\1\303"+
    "\22\37\4\0\3\37\30\0\1\37\5\0\13\37\1\304"+
    "\12\37\4\0\3\37\30\0\1\37\5\0\15\37\1\305"+
    "\10\37\4\0\1\37\1\305\1\37\53\0\1\306\15\0"+
    "\1\306\52\0\1\307\51\0\1\37\5\0\13\37\1\310"+
    "\12\37\4\0\3\37\30\0\1\37\5\0\4\37\1\311"+
    "\21\37\4\0\3\37\30\0\1\37\5\0\7\37\1\312"+
    "\16\37\4\0\3\37\30\0\1\37\5\0\4\37\1\313"+
    "\21\37\4\0\3\37\30\0\1\37\5\0\15\37\1\314"+
    "\10\37\4\0\1\37\1\314\1\37\30\0\1\37\5\0"+
    "\21\37\1\315\4\37\4\0\3\37\4\0\1\316\23\0"+
    "\1\37\5\0\1\317\25\37\4\0\3\37\30\0\1\37"+
    "\5\0\6\37\1\320\17\37\4\0\3\37\30\0\1\37"+
    "\5\0\22\37\1\321\3\37\4\0\2\37\1\321\44\0"+
    "\1\322\106\0\1\323\11\0\1\323\30\0\1\37\5\0"+
    "\4\37\1\324\21\37\4\0\3\37\30\0\1\37\5\0"+
    "\23\37\1\325\2\37\4\0\3\37\61\0\1\326\53\0"+
    "\1\327\60\0\1\37\5\0\22\37\1\330\3\37\4\0"+
    "\2\37\1\330\30\0\1\37\5\0\4\37\1\331\21\37"+
    "\4\0\3\37\42\0\1\332\60\0\1\37\5\0\10\37"+
    "\1\333\15\37\4\0\3\37\3\0\1\334\24\0\1\37"+
    "\5\0\4\37\1\335\21\37\4\0\3\37\42\0\1\336"+
    "\60\0\1\37\5\0\15\37\1\337\10\37\4\0\1\37"+
    "\1\337\1\37\53\0\1\340\15\0\1\340\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8614];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\2\1\7\11\2\1\2\11"+
    "\24\1\4\11\1\1\1\11\2\1\1\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\1\1\0\3\11\2\1\1\11"+
    "\20\1\1\0\12\1\2\11\3\0\1\11\1\0\5\1"+
    "\1\0\5\1\1\0\7\1\1\0\14\1\1\0\1\1"+
    "\1\0\2\11\1\0\1\11\4\1\1\11\3\1\1\0"+
    "\3\1\1\11\1\0\2\1\1\11\10\1\1\0\2\1"+
    "\1\11\1\1\2\0\2\1\1\11\3\1\2\0\1\11"+
    "\2\1\1\11\11\1\1\0\1\1\1\11\1\0\3\1"+
    "\2\0\6\1\1\0\3\1\2\11\2\1\1\0\1\11"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<CompError> lexicalErrors = new LinkedList<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    lexicalErrors = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { // return new Symbol(sym.ERROR, yyline, yycolumn, yytext());
        lexicalErrors.add(new CompError(ErrorType.LEXICAL, "The char " + yytext() + " does not belong to the language", yyline, yycolumn));
            }
          // fall through
          case 71: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 72: break;
          case 3:
            { return new Symbol(sym.NOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 4:
            { return new Symbol(sym.ROOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 5:
            { return new Symbol(sym.MODULO, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 6:
            { return new Symbol(sym.PAR_START, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 7:
            { return new Symbol(sym.PAR_END, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 8:
            { return new Symbol(sym.MULTIPLICATION, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 9:
            { return new Symbol(sym.PLUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 10:
            { return new Symbol(sym.COMMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 11:
            { return new Symbol(sym.MINUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 12:
            { return new Symbol(sym.DOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 13:
            { return new Symbol(sym.DIVISION, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 14:
            { return new Symbol(sym.WHOLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 15:
            { return new Symbol(sym.COLON, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 16:
            { return new Symbol(sym.END, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 17:
            { return new Symbol(sym.LESS_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 18:
            { return new Symbol(sym.EQUALS, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 19:
            { return new Symbol(sym.GREATER_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 20:
            { return new Symbol(sym.ID, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 21:
            { return new Symbol(sym.SBRA_START, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 22:
            { return new Symbol(sym.SBRA_END, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 23:
            { return new Symbol(sym.POWER, yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 24:
            { return new Symbol(sym.BRA_START, yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 25:
            { return new Symbol(sym.BRA_END, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 26:
            { return new Symbol(sym.NOT_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 27:
            { String str = yytext();
        str = str.substring(1, str.length() -1);
        str = str.replace("\\n", "\n")
             .replace("\\t", "\t")
             .replace("\\\"", "\"")
             .replace("\\\\", "\\")
             .replace("\\'", "\'");
        return new Symbol(sym.STRING, yyline, yycolumn, str);
            }
          // fall through
          case 97: break;
          case 28:
            { return new Symbol(sym.AND, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 29:
            { // return new Symbol(sym.SINGLE_LINE_COMMENT, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 30:
            { return new Symbol(sym.LESS_EQUAL_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 31:
            { return new Symbol(sym.EQUALS_TO, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 32:
            { return new Symbol(sym.GREATER_EQUAL_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 33:
            { return new Symbol(sym.AS, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 34:
            { return new Symbol(sym.DO, yyline, yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 35:
            { return new Symbol(sym.IF, yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 36:
            { return new Symbol(sym.OR, yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 37:
            { String chr = yytext();
    chr = chr.substring(1, chr.length() - 1);
    switch (chr) {
        case "\\n": chr = "\n"; break;
        case "\\t": chr = "\t"; break;
        case "\\\"": chr = "\""; break;
        case "\\\\": chr = "\\"; break;
        case "\\'": chr = "'"; break;
    }
    return new Symbol(sym.CHAR, yyline, yycolumn, chr);
            }
          // fall through
          case 107: break;
          case 38:
            { return new Symbol(sym.DOUBLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 39:
            { return new Symbol(sym.FOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 40:
            { return new Symbol(sym.GET, yyline, yycolumn, yytext());
            }
          // fall through
          case 110: break;
          case 41:
            { return new Symbol(sym.INT_RW, yyline, yycolumn, yytext());
            }
          // fall through
          case 111: break;
          case 42:
            { return new Symbol(sym.LET, yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 43:
            { return new Symbol(sym.LOG, yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 44:
            { return new Symbol(sym.POP, yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 45:
            { return new Symbol(sym.SET, yyline, yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 46:
            { // return new Symbol(sym.BLOCK_COMMENT, yyline, yycolumn, yytext());
            }
          // fall through
          case 116: break;
          case 47:
            { return new Symbol(sym.BOOL_RW, yyline, yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 48:
            { return new Symbol(sym.CAST, yyline, yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 49:
            { return new Symbol(sym.CHAR_RW, yyline, yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 50:
            { return new Symbol(sym.ELSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 120: break;
          case 51:
            { return new Symbol(sym.LIST, yyline, yycolumn, yytext());
            }
          // fall through
          case 121: break;
          case 52:
            { return new Symbol(sym.BOOLEAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 122: break;
          case 53:
            { return new Symbol(sym.VOID_RW, yyline, yycolumn, yytext());
            }
          // fall through
          case 123: break;
          case 54:
            { return new Symbol(sym.BREAK, yyline, yycolumn, yytext());
            }
          // fall through
          case 124: break;
          case 55:
            { return new Symbol(sym.CONST, yyline, yycolumn, yytext());
            }
          // fall through
          case 125: break;
          case 56:
            { return new Symbol(sym.MATCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 126: break;
          case 57:
            { return new Symbol(sym.ROUND, yyline, yycolumn, yytext());
            }
          // fall through
          case 127: break;
          case 58:
            { return new Symbol(sym.WHILE, yyline, yycolumn, yytext());
            }
          // fall through
          case 128: break;
          case 59:
            { return new Symbol(sym.PUSH, yyline, yycolumn, yytext());
            }
          // fall through
          case 129: break;
          case 60:
            { return new Symbol(sym.DOUBLE_RW, yyline, yycolumn, yytext());
            }
          // fall through
          case 130: break;
          case 61:
            { return new Symbol(sym.LENGTH, yyline, yycolumn, yytext());
            }
          // fall through
          case 131: break;
          case 62:
            { return new Symbol(sym.REMOVE, yyline, yycolumn, yytext());
            }
          // fall through
          case 132: break;
          case 63:
            { return new Symbol(sym.RETURN, yyline, yycolumn, yytext());
            }
          // fall through
          case 133: break;
          case 64:
            { return new Symbol(sym.STRING_RW, yyline, yycolumn, yytext());
            }
          // fall through
          case 134: break;
          case 65:
            { return new Symbol(sym.STRUCT, yyline, yycolumn, yytext());
            }
          // fall through
          case 135: break;
          case 66:
            { return new Symbol(sym.CONSOLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 136: break;
          case 67:
            { return new Symbol(sym.DEFAULT, yyline, yycolumn, yytext());
            }
          // fall through
          case 137: break;
          case 68:
            { return new Symbol(sym.REVERSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 138: break;
          case 69:
            { return new Symbol(sym.CONTINUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 139: break;
          case 70:
            { return new Symbol(sym.RUN_MAIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
