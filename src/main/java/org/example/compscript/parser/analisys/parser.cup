// Header Java code
package org.example.compscript.parser.analisys;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashMap;
import org.example.compscript.parser.abstract_.Instruction;
import org.example.compscript.parser.symbol.*;

// Instructions
import org.example.compscript.parser.instructions.Print;
import org.example.compscript.parser.instructions.declarations.Declaration;
import org.example.compscript.parser.instructions.declarations.ArrayDeclaration;
import org.example.compscript.parser.instructions.declarations.Array2DDeclaration;
import org.example.compscript.parser.instructions.assignments.Assignment;
import org.example.compscript.parser.instructions.assignments.ArrAssignment;
import org.example.compscript.parser.instructions.assignments.Arr2DAssignment;
import org.example.compscript.parser.instructions.IncrementDecrement;
import org.example.compscript.parser.instructions.If;
import org.example.compscript.parser.instructions.match.Match;
import org.example.compscript.parser.instructions.match.Case;
import org.example.compscript.parser.instructions.match.Default;
import org.example.compscript.parser.instructions.loop.For;
import org.example.compscript.parser.instructions.loop.While;
import org.example.compscript.parser.instructions.loop.DoWhile;
import org.example.compscript.parser.instructions.loop.Break;
import org.example.compscript.parser.instructions.loop.Continue;
import org.example.compscript.parser.instructions.lists.ListDeclaration;
import org.example.compscript.parser.instructions.lists.Push;
import org.example.compscript.parser.instructions.lists.Get;
import org.example.compscript.parser.instructions.lists.Set;
import org.example.compscript.parser.instructions.lists.Remove;
import org.example.compscript.parser.instructions.lists.Pop;
import org.example.compscript.parser.instructions.lists.Reverse;
import org.example.compscript.parser.instructions.structs.StructDeclaration;
import org.example.compscript.parser.instructions.structs.StructTypeIns;
import org.example.compscript.parser.instructions.structs.StructInstanceIns;
import org.example.compscript.parser.instructions.structs.StructValue;
import org.example.compscript.parser.instructions.structs.StructAccess;
import org.example.compscript.parser.instructions.structs.StructAssignment;
import org.example.compscript.parser.instructions.funcs.Method;
import org.example.compscript.parser.instructions.funcs.RunMain;
import org.example.compscript.parser.instructions.funcs.Call;

// Expressions
import org.example.compscript.parser.expresions.Native;
import org.example.compscript.parser.expresions.operators.relational.*;
import org.example.compscript.parser.expresions.operators.arithmetic.*;
import org.example.compscript.parser.expresions.operators.logic.*;
import org.example.compscript.parser.exceptions.*;
import org.example.compscript.parser.expresions.cast.Cast;
import org.example.compscript.parser.expresions.variables.Access;
import org.example.compscript.parser.expresions.variables.ArrAccess;
import org.example.compscript.parser.expresions.variables.Arr2DAccess;


// Class name
parser code {:

    Lexer lex;
    Parser(Lexer lex){this.lex = lex;}

    public LinkedList<CompError> sintacticErrors = new LinkedList<>();

    public void syntax_error(Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICR, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }

    public void unrecovered_syntax_error (Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICU, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }

:}

action code {:
:}

// Terminals
terminal String WHOLE, STRING, DOUBLE, BOOLEAN, CHAR, ID;
terminal IF, ELSE, MATCH, DEFAULT, WHILE, FOR, DO, BREAK, CONTINUE;
terminal END, COLON, CONSOLE, DOT, LOG, CAST, AS, CONST, LET, BRA_START, BRA_END, SBRA_START, SBRA_END, COMMA;
terminal INT_RW, DOUBLE_RW, CHAR_RW, BOOL_RW, STRING_RW, VOID_RW, LIST, PUSH, GET, SET, REMOVE, POP, REVERSE, STRUCT;
terminal PAR_START, PAR_END, PLUS, MINUS, UMINUS, EQUALS, MULTIPLICATION, DIVISION, POWER, ROOT, MODULO;
terminal EQUALS_TO, NOT_EQUAL, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN;
terminal OR, AND, NOT;
terminal RUN_MAIN;

// Non-terminals
nonterminal LinkedList<Instruction> S, INSTRUCTIONS, CASES, ARRAY_DATA, STRUCT_TYPES_LIST, STRUCT_VALUES_LIST;
nonterminal LinkedList<LinkedList<Instruction>> ARRAY2D_DATA;
nonterminal Instruction INSTRUCTION, PRINT, DECLARATION, ASSIGNMENT, INCREMENT_DECREMENT, IF_SENTENCE, MATCH_SENTENCE, CASE, STRUCT_INST;
nonterminal Instruction LOOP_FOR, STEP_FOR, LOOP_WHILE, LOOP_DO, BREAKS, CONTINUES, LIST_INST;
nonterminal Instruction METHOD, RUN_MAIN_INS, CALL;
nonterminal Instruction EXPRESSION;
nonterminal Type TYPE_RW;
nonterminal String MUTABILITY, COUNTER;
nonterminal LinkedList<HashMap> PARAMSCALL, PARAMS;
nonterminal HashMap <String, Object> PARAM;

// precedences
precedence left OR;
precedence left AND;
precedence right NOT;
precedence left EQUALS_TO, NOT_EQUAL, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN;
precedence left PLUS, MINUS;
precedence left MULTIPLICATION, DIVISION, MODULO;
precedence nonassoc POWER, ROOT;
precedence right UMINUS;

// Initial state
start with S;

// Productions
S ::= INSTRUCTIONS:a  {: RESULT = a; :}
;

INSTRUCTIONS ::= INSTRUCTIONS:a INSTRUCTION:b {: RESULT = a; RESULT.add(b); :}
               | INSTRUCTION:a                {: RESULT = new LinkedList<Instruction>(); RESULT.add(a); :}

;

INSTRUCTION ::= PRINT:a END {: RESULT = a; :}
            | DECLARATION:a END {: RESULT = a; :}
            | ASSIGNMENT:a END {: RESULT = a; :}
            | INCREMENT_DECREMENT:a END {: RESULT = a; :}
            | IF_SENTENCE:a {: RESULT = a; :}
            | MATCH_SENTENCE:a {: RESULT = a; :}
            | LOOP_FOR:a {: RESULT = a; :}
            | LOOP_WHILE:a {: RESULT = a; :}
            | LOOP_DO:a END {: RESULT = a; :}
            | BREAKS:a END {: RESULT = a; :}
            | CONTINUES:a END {: RESULT = a; :}
            | LIST_INST:a END {: RESULT = a; :}
            | STRUCT_INST:a END {: RESULT = a; :}
            | METHOD:a {: RESULT = a; :}
            | RUN_MAIN_INS:a END {: RESULT = a; :}
            | CALL:a END {: RESULT = a; :}
            | error END {: RESULT = null; :}
            | error {: RESULT = null; :}
;

CALL ::= ID:a PAR_START PAR_END {: RESULT = new Call(a, null, aleft, aright); :}
        | ID:a PAR_START PARAMSCALL:b PAR_END {: RESULT = new Call(a, b, aleft, aright); :}
;

RUN_MAIN_INS ::= RUN_MAIN ID:a PAR_START PAR_END {: RESULT = new RunMain(a, null, aleft, aright); :}
                | RUN_MAIN ID:a PAR_START PARAMSCALL:b PAR_END {: RESULT = new RunMain(a, b, aleft, aright); :}
;

PARAMSCALL ::= PARAMSCALL:a COMMA ID:b EQUALS EXPRESSION:c {:
                                                                var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", b);
                                                                hm2.put("exp", c);
                                                                RESULT = a;
                                                                RESULT.add(hm2);
                                                            :}
            | ID:a EQUALS EXPRESSION:b {:
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id", a);
                                            hm.put("exp", b);
                                            RESULT = new LinkedList<HashMap>();
                                            RESULT.add(hm);
                                        :}
;

PARAMS ::= PARAMS:a COMMA PARAM:b {: RESULT = a; RESULT.add(b); :}
        | PARAM:a {: RESULT = new LinkedList<HashMap>(); RESULT.add(a); :}
;

PARAM ::= TYPE_RW:a COLON ID:b EQUALS EXPRESSION:c {:
                                                var hm2 = new HashMap<String, Object>();
                                                hm2.put("type", a);
                                                hm2.put("id", b);
                                                hm2.put("exp", c);
                                                RESULT = hm2;
                                            :}
        | TYPE_RW:a COLON ID:b {:
                            var hm = new HashMap<String, Object>();
                            hm.put("type", a);
                            hm.put("id", b);
                            hm.put("exp", null);
                            RESULT = hm;
                       :}
;

STRUCT_INST ::= STRUCT ID:a BRA_START STRUCT_TYPES_LIST:b BRA_END {: RESULT = new StructDeclaration(a, b, aleft, aright); :}
;

STRUCT_TYPES_LIST ::= STRUCT_TYPES_LIST:a ID:b COLON TYPE_RW:c END {: RESULT = a; RESULT.add(new StructTypeIns(b, c, bleft, bright)); :}
            | ID:a COLON TYPE_RW:b END {: RESULT = new LinkedList<Instruction>(); RESULT.add(new StructTypeIns(a, b, aleft, aright)); :}
;

LIST_INST ::= ID:a DOT PUSH PAR_START EXPRESSION:b PAR_END {: RESULT = new Push(a, b, aleft, aright); :}
            | ID:a DOT SET PAR_START EXPRESSION:b COMMA EXPRESSION:c PAR_END {: RESULT = new Set(a, b, c, aleft, aright); :}
            | ID:a DOT REMOVE PAR_START EXPRESSION:b PAR_END {: RESULT = new Remove(b, a, aleft, aright); :}
            | ID:a DOT POP PAR_START PAR_END {: RESULT = new Pop(a, aleft, aright); :}
            | ID:a DOT REVERSE PAR_START PAR_END {: RESULT = new Reverse(a, aleft, aright); :}
;

PRINT ::= CONSOLE DOT LOG PAR_START EXPRESSION:a PAR_END {: RESULT = new Print(a, aleft, aright); :}
;

MUTABILITY ::= CONST {: RESULT = "false"; :}
            | LET {: RESULT = "true"; :}
;

TYPE_RW ::= INT_RW {: RESULT = new Type(dataType.WHOLE); :}
         | DOUBLE_RW {: RESULT = new Type(dataType.DOUBLE); :}
         | BOOL_RW {: RESULT = new Type(dataType.BOOLEAN); :}
         | CHAR_RW {: RESULT = new Type(dataType.CHAR); :}
         | STRING_RW {: RESULT = new Type(dataType.STRING); :}
         | VOID_RW {: RESULT = new Type(dataType.VOID); :}
;

METHOD ::= TYPE_RW:a ID:b PAR_START PAR_END BRA_START INSTRUCTIONS:c BRA_END {: RESULT = new Method(a, b, null, c, aleft, aright); :}
        | TYPE_RW:a ID:b PAR_START PARAMS:c PAR_END BRA_START INSTRUCTIONS:d BRA_END {: RESULT = new Method(a, b, c, d, aleft, aright); :}
;

ARRAY_DATA ::= ARRAY_DATA:a COMMA EXPRESSION:b {: RESULT = a; RESULT.add(b); :}
            | EXPRESSION:a {: RESULT = new LinkedList<Instruction>(); RESULT.add(a); :}
;

ARRAY2D_DATA ::= ARRAY2D_DATA:a COMMA SBRA_START ARRAY_DATA:b SBRA_END {: RESULT = a; RESULT.add(b); :}
            | SBRA_START ARRAY_DATA:a SBRA_END {: RESULT = new LinkedList<LinkedList<Instruction>>(); RESULT.add(a); :}
;

DECLARATION ::= MUTABILITY:a ID:b COLON TYPE_RW:c EQUALS EXPRESSION:d {: RESULT = new Declaration(a, b, c, d, aleft, aright); :}
            | MUTABILITY:a ID:b COLON TYPE_RW:c {: RESULT = new Declaration(a, b, c, aleft, aright); :}
            | MUTABILITY:a ID:b COLON LIST LESS_THAN TYPE_RW:c GREATER_THAN {: RESULT = new ListDeclaration(a, b, c, aleft, aright); :}
            | MUTABILITY:a ID:b COLON TYPE_RW:c SBRA_START SBRA_END EQUALS SBRA_START ARRAY_DATA:d SBRA_END {: RESULT = new ArrayDeclaration(a, b, c, d, aleft, aright); :}
            | MUTABILITY:a ID:b COLON TYPE_RW:c SBRA_START SBRA_END SBRA_START SBRA_END EQUALS SBRA_START ARRAY2D_DATA:d SBRA_END {: RESULT = new Array2DDeclaration(a, b, c, d, aleft, aright); :}
            | MUTABILITY:a ID:b COLON ID:c EQUALS BRA_START STRUCT_VALUES_LIST:d BRA_END {: RESULT = new StructInstanceIns(a, b, c, d, aleft, aright); :}
            | ID:a DOT ID:b EQUALS EXPRESSION:c {: RESULT = new StructAssignment(a, b, c, aleft, aright); :}
;

STRUCT_VALUES_LIST ::= STRUCT_VALUES_LIST:a COMMA ID:b COLON EXPRESSION:c {: RESULT = a; RESULT.add(new StructValue(b, c, bleft, bright)); :}
            | ID:a COLON EXPRESSION:b  {: RESULT = new LinkedList<Instruction>(); RESULT.add(new StructValue(a, b, aleft, aright)); :}
;

ASSIGNMENT ::= ID:a EQUALS EXPRESSION:b {: RESULT = new Assignment(a, b, aleft, aright); :}
            | ID:a SBRA_START EXPRESSION:b SBRA_END EQUALS EXPRESSION:c {: RESULT = new ArrAssignment(a, b, c, aleft, aright); :}
            | ID:a SBRA_START EXPRESSION:b SBRA_END SBRA_START EXPRESSION:c SBRA_END EQUALS EXPRESSION:d {: RESULT = new Arr2DAssignment(a, b, c, d, aleft, aright); :}
;

COUNTER ::= PLUS PLUS {: RESULT = "plus"; :}
        | MINUS MINUS {: RESULT = "minus"; :}
;

INCREMENT_DECREMENT ::= ID:a COUNTER:b {: RESULT = new IncrementDecrement(a, b, aleft, aright); :}
;

IF_SENTENCE ::= IF PAR_START EXPRESSION:a PAR_END BRA_START INSTRUCTIONS:b BRA_END {: RESULT = new If(a, b, aleft, aright); :}
            | IF PAR_START EXPRESSION:a PAR_END BRA_START INSTRUCTIONS:b BRA_END ELSE IF_SENTENCE:c {: LinkedList<Instruction> elseif = new LinkedList<>(); elseif.add(c); RESULT = new If(a, b, elseif, aleft, aright); :}
            | IF PAR_START EXPRESSION:a PAR_END BRA_START INSTRUCTIONS:b BRA_END ELSE BRA_START INSTRUCTIONS:c BRA_END {: RESULT = new If(a, b, c, aleft, aright); :}
;

CASE ::= EXPRESSION:a EQUALS GREATER_THAN BRA_START INSTRUCTIONS:b BRA_END {: RESULT = new Case(a, b, aleft, aright); :}
        | DEFAULT EQUALS GREATER_THAN BRA_START INSTRUCTIONS:a BRA_END {: RESULT = new Default(a, aleft, aright); :}
;

CASES ::= CASES:a CASE:b {: RESULT = a; RESULT.add(b); :}
        | CASE:a {: RESULT = new LinkedList<Instruction>(); RESULT.add(a); :}
;

MATCH_SENTENCE ::= MATCH EXPRESSION:a BRA_START CASES:b BRA_END {: RESULT = new Match(a, b, aleft, aright); :}
;

LOOP_FOR ::= FOR PAR_START ASSIGNMENT:a END EXPRESSION:b END STEP_FOR:c PAR_END BRA_START INSTRUCTIONS:d BRA_END {: RESULT = new For(a, b, c, d, aleft, aright); :}
;

STEP_FOR ::= ASSIGNMENT:a {: RESULT = a; :}
        | INCREMENT_DECREMENT:a {: RESULT = a; :}
;

LOOP_WHILE ::= WHILE PAR_START EXPRESSION:a PAR_END BRA_START INSTRUCTIONS:b BRA_END {: RESULT = new While(a, b, aleft, aright); :}
;

LOOP_DO ::= DO BRA_START INSTRUCTIONS:a BRA_END WHILE PAR_START EXPRESSION:b PAR_END {: RESULT = new DoWhile(a, b, aleft, aright); :}
;

BREAKS ::= BREAK:a {: RESULT = new Break(aleft, aright); :}
;

CONTINUES ::= CONTINUE:a {: RESULT = new Continue(aleft, aright); :}
;

EXPRESSION ::= MINUS EXPRESSION:a {: RESULT = new UnitaryNegation(a, aleft, aright); :} %prec UMINUS
            | EXPRESSION:a PLUS EXPRESSION:b {: RESULT = new Addition(a, b, aleft, aright); :}
            | EXPRESSION:a MINUS EXPRESSION:b {: RESULT = new Substraction(a, b, aleft, aright); :}
            | EXPRESSION:a MULTIPLICATION EXPRESSION:b {: RESULT = new Multiplication(a, b, aleft, aright); :}
            | EXPRESSION:a DIVISION EXPRESSION:b {: RESULT = new Division(a, b, aleft, aright); :}
            | EXPRESSION:a POWER EXPRESSION:b {: RESULT = new Power(a, b, aleft, aright); :}
            | EXPRESSION:a ROOT EXPRESSION:b {: RESULT = new Root(a, b, aleft, aright); :}
            | EXPRESSION:a MODULO EXPRESSION:b {: RESULT = new Modulo(a, b, aleft, aright); :}
            | EXPRESSION:a EQUALS_TO EXPRESSION:b {: RESULT = new EqualsTo(a, b, aleft, aright); :}
            | EXPRESSION:a NOT_EQUAL EXPRESSION:b {: RESULT = new NotEqualsTo(a, b, aleft, aright); :}
            | EXPRESSION:a LESS_THAN EXPRESSION:b {: RESULT = new LessThan(a, b, aleft, aright); :}
            | EXPRESSION:a GREATER_THAN EXPRESSION:b {: RESULT = new GreaterThan(a, b, aleft, aright); :}
            | EXPRESSION:a LESS_EQUAL_THAN EXPRESSION:b {: RESULT = new LessEqualsThan(a, b, aleft, aright); :}
            | EXPRESSION:a GREATER_EQUAL_THAN EXPRESSION:b {: RESULT = new GreaterEqualsThan(a, b, aleft, aright); :}
            | EXPRESSION:a AND EXPRESSION:b {: RESULT = new And(a, b, aleft, aright); :}
            | EXPRESSION:a OR EXPRESSION:b {: RESULT = new Or(a, b, aleft, aright); :}
            | NOT EXPRESSION:a {: RESULT = new Not(a, aleft, aright); :}
            | WHOLE:a                  {: RESULT = new Native(Integer.parseInt(a),new Type(dataType.WHOLE), aleft, aright); :}
            | STRING:a {: RESULT = new Native(a, new Type(dataType.STRING), aleft, aright); :}
            | DOUBLE:a                 {: RESULT = new Native(new Double(a),new Type(dataType.DOUBLE), aleft, aright); :}
            | BOOLEAN:a {: RESULT = new Native(Boolean.parseBoolean(a), new Type(dataType.BOOLEAN), aleft, aright); :}
            | CHAR:a {: RESULT = new Native(a.charAt(0), new Type(dataType.CHAR), aleft, aright); :}
            | ID:a {: RESULT = new Access(a, aleft, aright); :}
            | CAST PAR_START EXPRESSION:a AS TYPE_RW:b PAR_END {: RESULT = new Cast(a, b, aleft, aright); :}
            | ID:a SBRA_START EXPRESSION:b SBRA_END {: RESULT = new ArrAccess(a, b, aleft, aright); :}
            | ID:a SBRA_START EXPRESSION:b SBRA_END SBRA_START EXPRESSION:c SBRA_END {: RESULT = new Arr2DAccess(a, b, c, aleft, aright); :}
            | ID:a DOT GET PAR_START EXPRESSION:b PAR_END {: RESULT = new Get(a, b, aleft, aright); :}
            | ID:a DOT REMOVE PAR_START EXPRESSION:b PAR_END {: RESULT = new Remove(b, a, aleft, aright); :}
            | ID:a DOT POP PAR_START PAR_END {: RESULT = new Pop(a, aleft, aright); :}
            | ID:a DOT ID:b {: RESULT = new StructAccess(a, b, aleft, aright); :}
            | PAR_START EXPRESSION:a PAR_END {: RESULT = a; :}
;