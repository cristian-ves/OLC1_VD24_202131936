
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.compscript.parser.analisys;

import java_cup.runtime.*;
import java.util.LinkedList;
import org.example.compscript.parser.abstract_.Instruction;
import org.example.compscript.parser.symbol.*;
import org.example.compscript.parser.instructions.Print;
import org.example.compscript.parser.instructions.declarations.Declaration;
import org.example.compscript.parser.instructions.declarations.ArrayDeclaration;
import org.example.compscript.parser.instructions.declarations.Array2DDeclaration;
import org.example.compscript.parser.instructions.assignments.Assignment;
import org.example.compscript.parser.instructions.assignments.ArrAssignment;
import org.example.compscript.parser.instructions.assignments.Arr2DAssignment;
import org.example.compscript.parser.instructions.IncrementDecrement;
import org.example.compscript.parser.instructions.If;
import org.example.compscript.parser.instructions.match.Match;
import org.example.compscript.parser.instructions.match.Case;
import org.example.compscript.parser.instructions.match.Default;
import org.example.compscript.parser.instructions.loop.For;
import org.example.compscript.parser.instructions.loop.While;
import org.example.compscript.parser.instructions.loop.DoWhile;
import org.example.compscript.parser.instructions.loop.Break;
import org.example.compscript.parser.instructions.loop.Continue;
import org.example.compscript.parser.expresions.Native;
import org.example.compscript.parser.expresions.operators.relational.*;
import org.example.compscript.parser.expresions.operators.arithmetic.*;
import org.example.compscript.parser.expresions.operators.logic.*;
import org.example.compscript.parser.exceptions.*;
import org.example.compscript.parser.expresions.cast.Cast;
import org.example.compscript.parser.expresions.variables.Access;
import org.example.compscript.parser.expresions.variables.ArrAccess;
import org.example.compscript.parser.expresions.variables.Arr2DAccess;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\010\010\000\002\027\003\000\002\027\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\005\005\000\002" +
    "\005\003\000\002\006\007\000\002\006\005\000\002\011" +
    "\010\000\002\011\006\000\002\011\014\000\002\011\016" +
    "\000\002\012\005\000\002\012\010\000\002\012\013\000" +
    "\002\030\004\000\002\030\004\000\002\013\004\000\002" +
    "\014\011\000\002\014\013\000\002\014\015\000\002\016" +
    "\010\000\002\016\010\000\002\004\004\000\002\004\003" +
    "\000\002\015\007\000\002\017\015\000\002\020\003\000" +
    "\002\020\003\000\002\021\011\000\002\022\012\000\002" +
    "\023\003\000\002\024\003\000\002\025\004\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\010\000\002" +
    "\025\006\000\002\025\011\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\032\003\025\011\015\012\014\014\035\016" +
    "\007\017\034\020\016\021\022\022\005\025\013\032\024" +
    "\033\027\001\002\000\004\023\314\001\002\000\004\023" +
    "\uffcd\001\002\000\036\002\ufff6\003\ufff6\011\ufff6\012\ufff6" +
    "\014\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\025" +
    "\ufff6\032\ufff6\033\ufff6\035\ufff6\001\002\000\004\046\306" +
    "\001\002\000\036\002\ufff9\003\ufff9\011\ufff9\012\ufff9\014" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\025\ufff9" +
    "\032\ufff9\033\ufff9\035\ufff9\001\002\000\004\023\305\001" +
    "\002\000\004\002\304\001\002\000\004\026\277\001\002" +
    "\000\004\046\264\001\002\000\012\036\227\050\257\051" +
    "\260\053\226\001\002\000\004\034\250\001\002\000\034" +
    "\002\000\003\025\011\015\012\014\014\035\016\007\017" +
    "\034\020\016\021\022\022\005\025\013\032\024\033\027" +
    "\001\002\000\036\002\ufffe\003\ufffe\011\ufffe\012\ufffe\014" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\025\ufffe" +
    "\032\ufffe\033\ufffe\035\ufffe\001\002\000\036\002\ufff8\003" +
    "\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\025\ufff8\032\ufff8\033\ufff8\035\ufff8\001" +
    "\002\000\004\023\uffce\001\002\000\004\023\247\001\002" +
    "\000\004\011\ufff0\001\002\000\004\023\246\001\002\000" +
    "\004\023\245\001\002\000\004\011\uffef\001\002\000\036" +
    "\002\ufff7\003\ufff7\011\ufff7\012\ufff7\014\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\025\ufff7\032\ufff7\033\ufff7" +
    "\035\ufff7\001\002\000\004\023\244\001\002\000\004\023" +
    "\243\001\002\000\004\023\242\001\002\000\004\046\211" +
    "\001\002\000\026\004\071\005\072\006\073\007\070\010" +
    "\077\011\074\030\066\046\067\051\064\071\075\001\002" +
    "\000\004\011\037\001\002\000\004\024\040\001\002\000" +
    "\014\041\043\042\046\043\042\044\044\045\041\001\002" +
    "\000\012\023\uffea\036\uffea\047\uffea\053\uffea\001\002\000" +
    "\012\023\uffeb\036\uffeb\047\uffeb\053\uffeb\001\002\000\012" +
    "\023\uffee\036\uffee\047\uffee\053\uffee\001\002\000\012\023" +
    "\uffec\036\uffec\047\uffec\053\uffec\001\002\000\010\023\uffe4" +
    "\036\050\053\047\001\002\000\012\023\uffed\036\uffed\047" +
    "\uffed\053\uffed\001\002\000\026\004\071\005\072\006\073" +
    "\007\070\010\077\011\074\030\066\046\067\051\064\071" +
    "\075\001\002\000\004\037\051\001\002\000\006\036\053" +
    "\053\052\001\002\000\004\036\162\001\002\000\004\037" +
    "\054\001\002\000\004\053\055\001\002\000\004\036\056" +
    "\001\002\000\004\036\057\001\002\000\026\004\071\005" +
    "\072\006\073\007\070\010\077\011\074\030\066\046\067" +
    "\051\064\071\075\001\002\000\006\037\062\040\061\001" +
    "\002\000\004\036\063\001\002\000\004\023\uffe2\001\002" +
    "\000\026\004\071\005\072\006\073\007\070\010\077\011" +
    "\074\030\066\046\067\051\064\071\075\001\002\000\026" +
    "\004\071\005\072\006\073\007\070\010\077\011\074\030" +
    "\066\046\067\051\064\071\075\001\002\000\006\037\155" +
    "\040\154\001\002\000\004\046\147\001\002\000\026\004" +
    "\071\005\072\006\073\007\070\010\077\011\074\030\066" +
    "\046\067\051\064\071\075\001\002\000\056\023\uffb8\031" +
    "\uffb8\034\uffb8\037\uffb8\040\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\001\002\000\056\023\uffbb\031\uffbb\034\uffbb\037" +
    "\uffbb\040\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\001\002" +
    "\000\056\023\uffba\031\uffba\034\uffba\037\uffba\040\uffba\047" +
    "\uffba\050\uffba\051\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\067\uffba\070\uffba\001\002\000\056\023\uffb9" +
    "\031\uffb9\034\uffb9\037\uffb9\040\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\001\002\000\060\023\uffb6\031\uffb6\034\uffb6" +
    "\036\137\037\uffb6\040\uffb6\047\uffb6\050\uffb6\051\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\001\002\000\026\004\071\005\072\006\073\007\070" +
    "\010\077\011\074\030\066\046\067\051\064\071\075\001" +
    "\002\000\044\037\uffe8\040\uffe8\050\104\051\100\054\116" +
    "\055\110\056\111\057\105\060\106\061\115\062\107\063" +
    "\103\064\112\065\102\066\113\067\114\070\101\001\002" +
    "\000\056\023\uffb7\031\uffb7\034\uffb7\037\uffb7\040\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\070\uffb7\001\002\000\026\004\071" +
    "\005\072\006\073\007\070\010\077\011\074\030\066\046" +
    "\067\051\064\071\075\001\002\000\026\004\071\005\072" +
    "\006\073\007\070\010\077\011\074\030\066\046\067\051" +
    "\064\071\075\001\002\000\026\004\071\005\072\006\073" +
    "\007\070\010\077\011\074\030\066\046\067\051\064\071" +
    "\075\001\002\000\026\004\071\005\072\006\073\007\070" +
    "\010\077\011\074\030\066\046\067\051\064\071\075\001" +
    "\002\000\026\004\071\005\072\006\073\007\070\010\077" +
    "\011\074\030\066\046\067\051\064\071\075\001\002\000" +
    "\026\004\071\005\072\006\073\007\070\010\077\011\074" +
    "\030\066\046\067\051\064\071\075\001\002\000\026\004" +
    "\071\005\072\006\073\007\070\010\077\011\074\030\066" +
    "\046\067\051\064\071\075\001\002\000\026\004\071\005" +
    "\072\006\073\007\070\010\077\011\074\030\066\046\067" +
    "\051\064\071\075\001\002\000\026\004\071\005\072\006" +
    "\073\007\070\010\077\011\074\030\066\046\067\051\064" +
    "\071\075\001\002\000\026\004\071\005\072\006\073\007" +
    "\070\010\077\011\074\030\066\046\067\051\064\071\075" +
    "\001\002\000\026\004\071\005\072\006\073\007\070\010" +
    "\077\011\074\030\066\046\067\051\064\071\075\001\002" +
    "\000\026\004\071\005\072\006\073\007\070\010\077\011" +
    "\074\030\066\046\067\051\064\071\075\001\002\000\026" +
    "\004\071\005\072\006\073\007\070\010\077\011\074\030" +
    "\066\046\067\051\064\071\075\001\002\000\026\004\071" +
    "\005\072\006\073\007\070\010\077\011\074\030\066\046" +
    "\067\051\064\071\075\001\002\000\026\004\071\005\072" +
    "\006\073\007\070\010\077\011\074\030\066\046\067\051" +
    "\064\071\075\001\002\000\056\023\uffc9\031\uffc9\034\uffc9" +
    "\037\uffc9\040\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\111\057\105\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\001" +
    "\002\000\056\023\uffc4\031\uffc4\034\uffc4\037\uffc4\040\uffc4" +
    "\047\uffc4\050\104\051\100\053\uffc4\054\116\055\110\056" +
    "\111\057\105\060\106\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\001\002\000\056\023" +
    "\uffbd\031\uffbd\034\uffbd\037\uffbd\040\uffbd\047\uffbd\050\104" +
    "\051\100\053\uffbd\054\116\055\110\056\111\057\105\060" +
    "\106\061\115\062\107\063\103\064\112\065\102\066\113" +
    "\067\uffbd\070\101\001\002\000\056\023\uffbf\031\uffbf\034" +
    "\uffbf\037\uffbf\040\uffbf\047\uffbf\050\104\051\100\053\uffbf" +
    "\054\116\055\110\056\111\057\105\060\106\061\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf" +
    "\001\002\000\056\023\uffc1\031\uffc1\034\uffc1\037\uffc1\040" +
    "\uffc1\047\uffc1\050\104\051\100\053\uffc1\054\116\055\110" +
    "\056\111\057\105\060\106\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\001\002\000\052" +
    "\023\uffc7\031\uffc7\034\uffc7\037\uffc7\040\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\001\002\000\056\023\uffc8\031\uffc8\034\uffc8\037\uffc8" +
    "\040\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\111\057\105\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\001\002\000" +
    "\056\023\uffc3\031\uffc3\034\uffc3\037\uffc3\040\uffc3\047\uffc3" +
    "\050\104\051\100\053\uffc3\054\116\055\110\056\111\057" +
    "\105\060\106\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\001\002\000\056\023\uffc5\031" +
    "\uffc5\034\uffc5\037\uffc5\040\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\111\057\105\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5" +
    "\070\uffc5\001\002\000\052\023\uffc6\031\uffc6\034\uffc6\037" +
    "\uffc6\040\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\001\002\000\056\023\uffcb" +
    "\031\uffcb\034\uffcb\037\uffcb\040\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\053\uffcb\054\116\055\110\056\111\057\105\060\106" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\001\002\000\056\023\uffc2\031\uffc2\034\uffc2" +
    "\037\uffc2\040\uffc2\047\uffc2\050\104\051\100\053\uffc2\054" +
    "\116\055\110\056\111\057\105\060\106\061\uffc2\062\uffc2" +
    "\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\001" +
    "\002\000\056\023\uffc0\031\uffc0\034\uffc0\037\uffc0\040\uffc0" +
    "\047\uffc0\050\104\051\100\053\uffc0\054\116\055\110\056" +
    "\111\057\105\060\106\061\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002\000\056\023" +
    "\uffbe\031\uffbe\034\uffbe\037\uffbe\040\uffbe\047\uffbe\050\104" +
    "\051\100\053\uffbe\054\116\055\110\056\111\057\105\060" +
    "\106\061\115\062\107\063\103\064\112\065\102\066\113" +
    "\067\uffbe\070\uffbe\001\002\000\056\023\uffca\031\uffca\034" +
    "\uffca\037\uffca\040\uffca\047\uffca\050\uffca\051\uffca\053\uffca" +
    "\054\116\055\110\056\111\057\105\060\106\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\001\002\000\056\023\uffbc\031\uffbc\034\uffbc\037\uffbc\040" +
    "\uffbc\047\uffbc\050\104\051\100\053\uffbc\054\116\055\110" +
    "\056\111\057\105\060\106\061\115\062\107\063\103\064" +
    "\112\065\102\066\113\067\uffbc\070\uffbc\001\002\000\026" +
    "\004\071\005\072\006\073\007\070\010\077\011\074\030" +
    "\066\046\067\051\064\071\075\001\002\000\042\037\141" +
    "\050\104\051\100\054\116\055\110\056\111\057\105\060" +
    "\106\061\115\062\107\063\103\064\112\065\102\066\113" +
    "\067\114\070\101\001\002\000\060\023\uffb4\031\uffb4\034" +
    "\uffb4\036\142\037\uffb4\040\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\001\002\000\026\004\071\005\072\006\073\007" +
    "\070\010\077\011\074\030\066\046\067\051\064\071\075" +
    "\001\002\000\042\037\144\050\104\051\100\054\116\055" +
    "\110\056\111\057\105\060\106\061\115\062\107\063\103" +
    "\064\112\065\102\066\113\067\114\070\101\001\002\000" +
    "\056\023\uffb3\031\uffb3\034\uffb3\037\uffb3\040\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\070\uffb3\001\002\000\042\047\146\050" +
    "\104\051\100\054\116\055\110\056\111\057\105\060\106" +
    "\061\115\062\107\063\103\064\112\065\102\066\113\067" +
    "\114\070\101\001\002\000\056\023\uffb2\031\uffb2\034\uffb2" +
    "\037\uffb2\040\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\001" +
    "\002\000\026\004\071\005\072\006\073\007\070\010\077" +
    "\011\074\030\066\046\067\051\064\071\075\001\002\000" +
    "\042\031\151\050\104\051\100\054\116\055\110\056\111" +
    "\057\105\060\106\061\115\062\107\063\103\064\112\065" +
    "\102\066\113\067\114\070\101\001\002\000\014\041\043" +
    "\042\046\043\042\044\044\045\041\001\002\000\004\047" +
    "\153\001\002\000\056\023\uffb5\031\uffb5\034\uffb5\037\uffb5" +
    "\040\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\001\002\000" +
    "\026\004\071\005\072\006\073\007\070\010\077\011\074" +
    "\030\066\046\067\051\064\071\075\001\002\000\006\037" +
    "\uffe7\040\uffe7\001\002\000\044\037\uffe9\040\uffe9\050\104" +
    "\051\100\054\116\055\110\056\111\057\105\060\106\061" +
    "\115\062\107\063\103\064\112\065\102\066\113\067\114" +
    "\070\101\001\002\000\056\023\uffcc\031\uffcc\034\uffcc\037" +
    "\uffcc\040\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\001\002" +
    "\000\006\037\161\040\154\001\002\000\006\037\uffe6\040" +
    "\uffe6\001\002\000\026\004\071\005\072\006\073\007\070" +
    "\010\077\011\074\030\066\046\067\051\064\071\075\001" +
    "\002\000\006\037\164\040\154\001\002\000\004\023\uffe3" +
    "\001\002\000\042\023\uffe5\050\104\051\100\054\116\055" +
    "\110\056\111\057\105\060\106\061\115\062\107\063\103" +
    "\064\112\065\102\066\113\067\114\070\101\001\002\000" +
    "\042\034\167\050\104\051\100\054\116\055\110\056\111" +
    "\057\105\060\106\061\115\062\107\063\103\064\112\065" +
    "\102\066\113\067\114\070\101\001\002\000\030\004\071" +
    "\005\072\006\073\007\070\010\077\011\074\015\170\030" +
    "\066\046\067\051\064\071\075\001\002\000\004\053\204" +
    "\001\002\000\032\004\071\005\072\006\073\007\070\010" +
    "\077\011\074\015\170\030\066\035\202\046\067\051\064" +
    "\071\075\001\002\000\032\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\015\uffd5\030\uffd5\035\uffd5\046\uffd5" +
    "\051\uffd5\071\uffd5\001\002\000\042\050\104\051\100\053" +
    "\174\054\116\055\110\056\111\057\105\060\106\061\115" +
    "\062\107\063\103\064\112\065\102\066\113\067\114\070" +
    "\101\001\002\000\004\064\175\001\002\000\004\034\176" +
    "\001\002\000\032\003\025\011\015\012\014\014\035\016" +
    "\007\017\034\020\016\021\022\022\005\025\013\032\024" +
    "\033\027\001\002\000\034\003\025\011\015\012\014\014" +
    "\035\016\007\017\034\020\016\021\022\022\005\025\013" +
    "\032\024\033\027\035\201\001\002\000\036\002\uffff\003" +
    "\uffff\011\uffff\012\uffff\014\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\025\uffff\032\uffff\033\uffff\035\uffff\001" +
    "\002\000\032\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\015\uffd8\030\uffd8\035\uffd8\046\uffd8\051\uffd8\071" +
    "\uffd8\001\002\000\036\002\uffd4\003\uffd4\011\uffd4\012\uffd4" +
    "\014\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\025" +
    "\uffd4\032\uffd4\033\uffd4\035\uffd4\001\002\000\032\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\015\uffd6\030" +
    "\uffd6\035\uffd6\046\uffd6\051\uffd6\071\uffd6\001\002\000\004" +
    "\064\205\001\002\000\004\034\206\001\002\000\032\003" +
    "\025\011\015\012\014\014\035\016\007\017\034\020\016" +
    "\021\022\022\005\025\013\032\024\033\027\001\002\000" +
    "\034\003\025\011\015\012\014\014\035\016\007\017\034" +
    "\020\016\021\022\022\005\025\013\032\024\033\027\035" +
    "\210\001\002\000\032\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\015\uffd7\030\uffd7\035\uffd7\046\uffd7\051" +
    "\uffd7\071\uffd7\001\002\000\004\011\212\001\002\000\006" +
    "\036\227\053\226\001\002\000\004\023\214\001\002\000" +
    "\026\004\071\005\072\006\073\007\070\010\077\011\074" +
    "\030\066\046\067\051\064\071\075\001\002\000\042\023" +
    "\216\050\104\051\100\054\116\055\110\056\111\057\105" +
    "\060\106\061\115\062\107\063\103\064\112\065\102\066" +
    "\113\067\114\070\101\001\002\000\004\011\015\001\002" +
    "\000\004\047\uffd2\001\002\000\004\047\uffd1\001\002\000" +
    "\004\047\222\001\002\000\004\034\223\001\002\000\032" +
    "\003\025\011\015\012\014\014\035\016\007\017\034\020" +
    "\016\021\022\022\005\025\013\032\024\033\027\001\002" +
    "\000\034\003\025\011\015\012\014\014\035\016\007\017" +
    "\034\020\016\021\022\022\005\025\013\032\024\033\027" +
    "\035\225\001\002\000\036\002\uffd3\003\uffd3\011\uffd3\012" +
    "\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\025\uffd3\032\uffd3\033\uffd3\035\uffd3\001\002\000\026\004" +
    "\071\005\072\006\073\007\070\010\077\011\074\030\066" +
    "\046\067\051\064\071\075\001\002\000\026\004\071\005" +
    "\072\006\073\007\070\010\077\011\074\030\066\046\067" +
    "\051\064\071\075\001\002\000\042\037\231\050\104\051" +
    "\100\054\116\055\110\056\111\057\105\060\106\061\115" +
    "\062\107\063\103\064\112\065\102\066\113\067\114\070" +
    "\101\001\002\000\006\036\233\053\232\001\002\000\026" +
    "\004\071\005\072\006\073\007\070\010\077\011\074\030" +
    "\066\046\067\051\064\071\075\001\002\000\026\004\071" +
    "\005\072\006\073\007\070\010\077\011\074\030\066\046" +
    "\067\051\064\071\075\001\002\000\042\037\235\050\104" +
    "\051\100\054\116\055\110\056\111\057\105\060\106\061" +
    "\115\062\107\063\103\064\112\065\102\066\113\067\114" +
    "\070\101\001\002\000\004\053\236\001\002\000\026\004" +
    "\071\005\072\006\073\007\070\010\077\011\074\030\066" +
    "\046\067\051\064\071\075\001\002\000\044\023\uffdf\047" +
    "\uffdf\050\104\051\100\054\116\055\110\056\111\057\105" +
    "\060\106\061\115\062\107\063\103\064\112\065\102\066" +
    "\113\067\114\070\101\001\002\000\044\023\uffe0\047\uffe0" +
    "\050\104\051\100\054\116\055\110\056\111\057\105\060" +
    "\106\061\115\062\107\063\103\064\112\065\102\066\113" +
    "\067\114\070\101\001\002\000\044\023\uffe1\047\uffe1\050" +
    "\104\051\100\054\116\055\110\056\111\057\105\060\106" +
    "\061\115\062\107\063\103\064\112\065\102\066\113\067" +
    "\114\070\101\001\002\000\036\002\ufff5\003\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\025\ufff5\032\ufff5\033\ufff5\035\ufff5\001\002\000\036" +
    "\002\ufffb\003\ufffb\011\ufffb\012\ufffb\014\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\025\ufffb\032\ufffb\033\ufffb" +
    "\035\ufffb\001\002\000\036\002\ufffc\003\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\025\ufffc\032\ufffc\033\ufffc\035\ufffc\001\002\000\036\002" +
    "\ufffa\003\ufffa\011\ufffa\012\ufffa\014\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\025\ufffa\032\ufffa\033\ufffa\035" +
    "\ufffa\001\002\000\036\002\ufff2\003\ufff2\011\ufff2\012\ufff2" +
    "\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\025" +
    "\ufff2\032\ufff2\033\ufff2\035\ufff2\001\002\000\036\002\ufffd" +
    "\003\ufffd\011\ufffd\012\ufffd\014\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\025\ufffd\032\ufffd\033\ufffd\035\ufffd" +
    "\001\002\000\032\003\025\011\015\012\014\014\035\016" +
    "\007\017\034\020\016\021\022\022\005\025\013\032\024" +
    "\033\027\001\002\000\034\003\025\011\015\012\014\014" +
    "\035\016\007\017\034\020\016\021\022\022\005\025\013" +
    "\032\024\033\027\035\252\001\002\000\004\016\253\001" +
    "\002\000\004\046\254\001\002\000\026\004\071\005\072" +
    "\006\073\007\070\010\077\011\074\030\066\046\067\051" +
    "\064\071\075\001\002\000\042\047\256\050\104\051\100" +
    "\054\116\055\110\056\111\057\105\060\106\061\115\062" +
    "\107\063\103\064\112\065\102\066\113\067\114\070\101" +
    "\001\002\000\004\023\uffcf\001\002\000\004\050\263\001" +
    "\002\000\004\051\262\001\002\000\006\023\uffdc\047\uffdc" +
    "\001\002\000\006\023\uffdd\047\uffdd\001\002\000\006\023" +
    "\uffde\047\uffde\001\002\000\026\004\071\005\072\006\073" +
    "\007\070\010\077\011\074\030\066\046\067\051\064\071" +
    "\075\001\002\000\042\047\266\050\104\051\100\054\116" +
    "\055\110\056\111\057\105\060\106\061\115\062\107\063" +
    "\103\064\112\065\102\066\113\067\114\070\101\001\002" +
    "\000\004\034\267\001\002\000\032\003\025\011\015\012" +
    "\014\014\035\016\007\017\034\020\016\021\022\022\005" +
    "\025\013\032\024\033\027\001\002\000\034\003\025\011" +
    "\015\012\014\014\035\016\007\017\034\020\016\021\022" +
    "\022\005\025\013\032\024\033\027\035\271\001\002\000" +
    "\040\002\uffdb\003\uffdb\011\uffdb\012\uffdb\013\272\014\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\025\uffdb\032" +
    "\uffdb\033\uffdb\035\uffdb\001\002\000\006\012\014\034\273" +
    "\001\002\000\032\003\025\011\015\012\014\014\035\016" +
    "\007\017\034\020\016\021\022\022\005\025\013\032\024" +
    "\033\027\001\002\000\036\002\uffda\003\uffda\011\uffda\012" +
    "\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\025\uffda\032\uffda\033\uffda\035\uffda\001\002\000\034\003" +
    "\025\011\015\012\014\014\035\016\007\017\034\020\016" +
    "\021\022\022\005\025\013\032\024\033\027\035\276\001" +
    "\002\000\036\002\uffd9\003\uffd9\011\uffd9\012\uffd9\014\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\025\uffd9\032" +
    "\uffd9\033\uffd9\035\uffd9\001\002\000\004\027\300\001\002" +
    "\000\004\046\301\001\002\000\026\004\071\005\072\006" +
    "\073\007\070\010\077\011\074\030\066\046\067\051\064" +
    "\071\075\001\002\000\042\047\303\050\104\051\100\054" +
    "\116\055\110\056\111\057\105\060\106\061\115\062\107" +
    "\063\103\064\112\065\102\066\113\067\114\070\101\001" +
    "\002\000\004\023\ufff1\001\002\000\004\002\001\001\002" +
    "\000\036\002\ufff3\003\ufff3\011\ufff3\012\ufff3\014\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\025\ufff3\032\ufff3" +
    "\033\ufff3\035\ufff3\001\002\000\026\004\071\005\072\006" +
    "\073\007\070\010\077\011\074\030\066\046\067\051\064" +
    "\071\075\001\002\000\042\047\310\050\104\051\100\054" +
    "\116\055\110\056\111\057\105\060\106\061\115\062\107" +
    "\063\103\064\112\065\102\066\113\067\114\070\101\001" +
    "\002\000\004\034\311\001\002\000\032\003\025\011\015" +
    "\012\014\014\035\016\007\017\034\020\016\021\022\022" +
    "\005\025\013\032\024\033\027\001\002\000\034\003\025" +
    "\011\015\012\014\014\035\016\007\017\034\020\016\021" +
    "\022\022\005\025\013\032\024\033\027\035\313\001\002" +
    "\000\036\002\uffd0\003\uffd0\011\uffd0\012\uffd0\014\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\025\uffd0\032\uffd0" +
    "\033\uffd0\035\uffd0\001\002\000\036\002\ufff4\003\ufff4\011" +
    "\ufff4\012\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\025\ufff4\032\ufff4\033\ufff4\035\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\040\002\011\003\016\007\017\010\022\011" +
    "\030\012\031\013\025\014\007\015\020\017\027\021\005" +
    "\022\032\023\003\024\010\027\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\260\001\001" +
    "\000\002\001\001\000\034\007\177\010\022\011\030\012" +
    "\031\013\025\014\007\015\020\017\027\021\005\022\032" +
    "\023\003\024\010\027\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\057\001\001\000\006\005" +
    "\157\025\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\064\025\075\001\001\000" +
    "\004\025\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\134\001\001\000\004\025\133\001\001" +
    "\000\004\025\132\001\001\000\004\025\131\001\001\000" +
    "\004\025\130\001\001\000\004\025\127\001\001\000\004" +
    "\025\126\001\001\000\004\025\125\001\001\000\004\025" +
    "\124\001\001\000\004\025\123\001\001\000\004\025\122" +
    "\001\001\000\004\025\121\001\001\000\004\025\120\001" +
    "\001\000\004\025\117\001\001\000\004\025\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\147" +
    "\001\001\000\002\001\001\000\004\026\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\162\025\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\170\016\171\025\172" +
    "\001\001\000\002\001\001\000\006\016\202\025\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\176\007\017\010\022\011" +
    "\030\012\031\013\025\014\007\015\020\017\027\021\005" +
    "\022\032\023\003\024\010\027\035\001\001\000\034\007" +
    "\177\010\022\011\030\012\031\013\025\014\007\015\020" +
    "\017\027\021\005\022\032\023\003\024\010\027\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\206\007\017\010\022\011\030\012\031\013\025" +
    "\014\007\015\020\017\027\021\005\022\032\023\003\024" +
    "\010\027\035\001\001\000\034\007\177\010\022\011\030" +
    "\012\031\013\025\014\007\015\020\017\027\021\005\022" +
    "\032\023\003\024\010\027\035\001\001\000\002\001\001" +
    "\000\004\012\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\214\001\001\000\002\001\001\000\010" +
    "\012\216\013\217\020\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\223\007\017\010\022\011\030\012\031\013\025\014" +
    "\007\015\020\017\027\021\005\022\032\023\003\024\010" +
    "\027\035\001\001\000\034\007\177\010\022\011\030\012" +
    "\031\013\025\014\007\015\020\017\027\021\005\022\032" +
    "\023\003\024\010\027\035\001\001\000\002\001\001\000" +
    "\004\025\240\001\001\000\004\025\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\237\001\001\000" +
    "\004\025\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\250\007\017\010\022\011\030" +
    "\012\031\013\025\014\007\015\020\017\027\021\005\022" +
    "\032\023\003\024\010\027\035\001\001\000\034\007\177" +
    "\010\022\011\030\012\031\013\025\014\007\015\020\017" +
    "\027\021\005\022\032\023\003\024\010\027\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\267\007\017\010\022\011" +
    "\030\012\031\013\025\014\007\015\020\017\027\021\005" +
    "\022\032\023\003\024\010\027\035\001\001\000\034\007" +
    "\177\010\022\011\030\012\031\013\025\014\007\015\020" +
    "\017\027\021\005\022\032\023\003\024\010\027\035\001" +
    "\001\000\002\001\001\000\004\014\273\001\001\000\036" +
    "\003\274\007\017\010\022\011\030\012\031\013\025\014" +
    "\007\015\020\017\027\021\005\022\032\023\003\024\010" +
    "\027\035\001\001\000\002\001\001\000\034\007\177\010" +
    "\022\011\030\012\031\013\025\014\007\015\020\017\027" +
    "\021\005\022\032\023\003\024\010\027\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\311\007" +
    "\017\010\022\011\030\012\031\013\025\014\007\015\020" +
    "\017\027\021\005\022\032\023\003\024\010\027\035\001" +
    "\001\000\034\007\177\010\022\011\030\012\031\013\025" +
    "\014\007\015\020\017\027\021\005\022\032\023\003\024" +
    "\010\027\035\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    Lexer lex;
    Parser(Lexer lex){this.lex = lex;}

    public LinkedList<CompError> sintacticErrors = new LinkedList<>();

    public void syntax_error(Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICR, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }

    public void unrecovered_syntax_error (Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICU, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCTIONS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= PRINT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLARATION END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= ASSIGNMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= INCREMENT_DECREMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= MATCH_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOP_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOP_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOP_DO END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= BREAKS END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= CONTINUES END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= error END 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PRINT ::= CONSOLE DOT LOG PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MUTABILITY ::= CONST 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MUTABILITY ::= LET 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE_RW ::= INT_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.WHOLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE_RW ::= DOUBLE_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE_RW ::= BOOL_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE_RW ::= CHAR_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE_RW ::= STRING_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARRAY_DATA ::= ARRAY_DATA COMMA EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARRAY_DATA ::= EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARRAY2D_DATA ::= ARRAY2D_DATA COMMA SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARRAY2D_DATA ::= SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruction>>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END EQUALS SBRA_START ARRAY_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END SBRA_START SBRA_END EQUALS SBRA_START ARRAY2D_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2DDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASSIGNMENT ::= ID EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrAssignment(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arr2DAssignment(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COUNTER ::= PLUS PLUS 
            {
              String RESULT =null;
		 RESULT = "plus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COUNTER ::= MINUS MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INCREMENT_DECREMENT ::= ID COUNTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementDecrement(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENT_DECREMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Instruction> elseif = new LinkedList<>(); elseif.add(c); RESULT = new If(a, b, elseif, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASE ::= EXPRESSION EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASE ::= DEFAULT EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Default(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASES ::= CASES CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASES ::= CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MATCH_SENTENCE ::= MATCH EXPRESSION BRA_START CASES BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LOOP_FOR ::= FOR PAR_START ASSIGNMENT END EXPRESSION END STEP_FOR PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STEP_FOR ::= ASSIGNMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STEP_FOR ::= INCREMENT_DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LOOP_WHILE ::= WHILE PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOOP_DO ::= DO BRA_START INSTRUCTIONS BRA_END WHILE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_DO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BREAKS ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAKS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTINUES ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSION ::= MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitaryNegation(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Addition(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Substraction(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESSION ::= EXPRESSION MULTIPLICATION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplication(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSION ::= EXPRESSION DIVISION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESSION ::= EXPRESSION POWER EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Power(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESSION ::= EXPRESSION ROOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Root(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESSION ::= EXPRESSION MODULO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESSION ::= EXPRESSION EQUALS_TO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESSION ::= EXPRESSION NOT_EQUAL EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESSION ::= EXPRESSION LESS_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESSION ::= EXPRESSION GREATER_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESSION ::= EXPRESSION LESS_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESSION ::= EXPRESSION GREATER_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSION ::= EXPRESSION AND EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSION ::= EXPRESSION OR EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESSION ::= NOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSION ::= WHOLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Integer.parseInt(a),new Type(dataType.WHOLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESSION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a, new Type(dataType.STRING), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESSION ::= DOUBLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(new Double(a),new Type(dataType.DOUBLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESSION ::= BOOLEAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Boolean.parseBoolean(a), new Type(dataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESSION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a.charAt(0), new Type(dataType.CHAR), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESSION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Access(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESSION ::= CAST PAR_START EXPRESSION AS TYPE_RW PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cast(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrAccess(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Arr2DAccess(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESSION ::= PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
