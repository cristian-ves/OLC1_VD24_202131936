
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.compscript.parser.analisys;

import java_cup.runtime.*;
import java.util.LinkedList;
import org.example.compscript.parser.abstract_.Instruction;
import org.example.compscript.parser.symbol.*;
import org.example.compscript.parser.instructions.Print;
import org.example.compscript.parser.instructions.declarations.Declaration;
import org.example.compscript.parser.instructions.declarations.ArrayDeclaration;
import org.example.compscript.parser.instructions.declarations.Array2DDeclaration;
import org.example.compscript.parser.instructions.assignments.Assignment;
import org.example.compscript.parser.instructions.assignments.ArrAssignment;
import org.example.compscript.parser.instructions.assignments.Arr2DAssignment;
import org.example.compscript.parser.instructions.IncrementDecrement;
import org.example.compscript.parser.instructions.If;
import org.example.compscript.parser.instructions.match.Match;
import org.example.compscript.parser.instructions.match.Case;
import org.example.compscript.parser.instructions.match.Default;
import org.example.compscript.parser.instructions.loop.For;
import org.example.compscript.parser.instructions.loop.While;
import org.example.compscript.parser.instructions.loop.DoWhile;
import org.example.compscript.parser.instructions.loop.Break;
import org.example.compscript.parser.instructions.loop.Continue;
import org.example.compscript.parser.instructions.lists.ListDeclaration;
import org.example.compscript.parser.instructions.lists.Push;
import org.example.compscript.parser.instructions.lists.Get;
import org.example.compscript.parser.instructions.lists.Set;
import org.example.compscript.parser.instructions.lists.Remove;
import org.example.compscript.parser.instructions.lists.Pop;
import org.example.compscript.parser.instructions.lists.Reverse;
import org.example.compscript.parser.expresions.Native;
import org.example.compscript.parser.expresions.operators.relational.*;
import org.example.compscript.parser.expresions.operators.arithmetic.*;
import org.example.compscript.parser.expresions.operators.logic.*;
import org.example.compscript.parser.exceptions.*;
import org.example.compscript.parser.expresions.cast.Cast;
import org.example.compscript.parser.expresions.variables.Access;
import org.example.compscript.parser.expresions.variables.ArrAccess;
import org.example.compscript.parser.expresions.variables.Arr2DAccess;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\003\000\002\025\010" +
    "\000\002\025\012\000\002\025\010\000\002\025\007\000" +
    "\002\025\007\000\002\010\010\000\002\030\003\000\002" +
    "\030\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\005\005" +
    "\000\002\005\003\000\002\006\007\000\002\006\005\000" +
    "\002\011\010\000\002\011\006\000\002\011\011\000\002" +
    "\011\014\000\002\011\016\000\002\012\005\000\002\012" +
    "\010\000\002\012\013\000\002\031\004\000\002\031\004" +
    "\000\002\013\004\000\002\014\011\000\002\014\013\000" +
    "\002\014\015\000\002\016\010\000\002\016\010\000\002" +
    "\004\004\000\002\004\003\000\002\015\007\000\002\017" +
    "\015\000\002\020\003\000\002\020\003\000\002\021\011" +
    "\000\002\022\012\000\002\023\003\000\002\024\003\000" +
    "\002\026\004\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\010\000\002\026\006\000\002\026\011\000" +
    "\002\026\010\000\002\026\010\000\002\026\007\000\002" +
    "\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\032\003\025\011\015\012\014\014\035\016" +
    "\010\017\034\020\016\021\022\022\005\025\013\032\024" +
    "\033\027\001\002\000\004\023\364\001\002\000\004\023" +
    "\uffc5\001\002\000\036\002\ufff6\003\ufff6\011\ufff6\012\ufff6" +
    "\014\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\025" +
    "\ufff6\032\ufff6\033\ufff6\035\ufff6\001\002\000\036\002\ufff9" +
    "\003\ufff9\011\ufff9\012\ufff9\014\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\025\ufff9\032\ufff9\033\ufff9\035\ufff9" +
    "\001\002\000\004\055\356\001\002\000\004\023\355\001" +
    "\002\000\004\002\354\001\002\000\004\026\347\001\002" +
    "\000\004\055\334\001\002\000\014\026\307\036\252\057" +
    "\253\060\254\062\251\001\002\000\004\034\300\001\002" +
    "\000\034\002\000\003\025\011\015\012\014\014\035\016" +
    "\010\017\034\020\016\021\022\022\005\025\013\032\024" +
    "\033\027\001\002\000\036\002\ufffe\003\ufffe\011\ufffe\012" +
    "\ufffe\014\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\025\ufffe\032\ufffe\033\ufffe\035\ufffe\001\002\000\036\002" +
    "\ufff8\003\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\025\ufff8\032\ufff8\033\ufff8\035" +
    "\ufff8\001\002\000\004\023\uffc6\001\002\000\004\023\277" +
    "\001\002\000\004\011\uffe9\001\002\000\040\002\ufff0\003" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\276\025\ufff0\032\ufff0\033\ufff0\035" +
    "\ufff0\001\002\000\004\023\275\001\002\000\004\011\uffe8" +
    "\001\002\000\036\002\ufff7\003\ufff7\011\ufff7\012\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\025\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\001\002\000\004\023\274\001" +
    "\002\000\004\023\273\001\002\000\004\023\272\001\002" +
    "\000\004\055\233\001\002\000\026\004\073\005\074\006" +
    "\075\007\071\010\101\011\076\030\070\055\072\060\066" +
    "\100\077\001\002\000\004\023\207\001\002\000\004\011" +
    "\040\001\002\000\004\024\041\001\002\000\016\041\045" +
    "\042\050\043\044\044\046\045\043\046\042\001\002\000" +
    "\004\072\204\001\002\000\014\023\uffe3\036\uffe3\056\uffe3" +
    "\062\uffe3\073\uffe3\001\002\000\014\023\uffe4\036\uffe4\056" +
    "\uffe4\062\uffe4\073\uffe4\001\002\000\014\023\uffe7\036\uffe7" +
    "\056\uffe7\062\uffe7\073\uffe7\001\002\000\014\023\uffe5\036" +
    "\uffe5\056\uffe5\062\uffe5\073\uffe5\001\002\000\010\023\uffdd" +
    "\036\052\062\051\001\002\000\014\023\uffe6\036\uffe6\056" +
    "\uffe6\062\uffe6\073\uffe6\001\002\000\026\004\073\005\074" +
    "\006\075\007\071\010\101\011\076\030\070\055\072\060" +
    "\066\100\077\001\002\000\004\037\053\001\002\000\006" +
    "\036\055\062\054\001\002\000\004\036\200\001\002\000" +
    "\004\037\056\001\002\000\004\062\057\001\002\000\004" +
    "\036\060\001\002\000\004\036\061\001\002\000\026\004" +
    "\073\005\074\006\075\007\071\010\101\011\076\030\070" +
    "\055\072\060\066\100\077\001\002\000\006\037\064\040" +
    "\063\001\002\000\004\036\065\001\002\000\004\023\uffda" +
    "\001\002\000\026\004\073\005\074\006\075\007\071\010" +
    "\101\011\076\030\070\055\072\060\066\100\077\001\002" +
    "\000\026\004\073\005\074\006\075\007\071\010\101\011" +
    "\076\030\070\055\072\060\066\100\077\001\002\000\006" +
    "\037\173\040\172\001\002\000\004\055\165\001\002\000" +
    "\056\023\uffb0\031\uffb0\034\uffb0\037\uffb0\040\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\077\uffb0\001\002\000\026\004\073\005" +
    "\074\006\075\007\071\010\101\011\076\030\070\055\072" +
    "\060\066\100\077\001\002\000\056\023\uffb3\031\uffb3\034" +
    "\uffb3\037\uffb3\040\uffb3\056\uffb3\057\uffb3\060\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\001\002\000\056\023\uffb2\031\uffb2\034\uffb2\037\uffb2\040" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\001\002\000\056" +
    "\023\uffb1\031\uffb1\034\uffb1\037\uffb1\040\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\001\002\000\062\023\uffae\026\142" +
    "\031\uffae\034\uffae\036\141\037\uffae\040\uffae\056\uffae\057" +
    "\uffae\060\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\076\uffae\077\uffae\001\002\000\026\004\073\005\074" +
    "\006\075\007\071\010\101\011\076\030\070\055\072\060" +
    "\066\100\077\001\002\000\044\037\uffe1\040\uffe1\057\106" +
    "\060\103\063\120\064\112\065\113\066\107\067\111\070" +
    "\117\071\110\072\105\073\114\074\104\075\115\076\116" +
    "\077\102\001\002\000\056\023\uffaf\031\uffaf\034\uffaf\037" +
    "\uffaf\040\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\001\002" +
    "\000\026\004\073\005\074\006\075\007\071\010\101\011" +
    "\076\030\070\055\072\060\066\100\077\001\002\000\026" +
    "\004\073\005\074\006\075\007\071\010\101\011\076\030" +
    "\070\055\072\060\066\100\077\001\002\000\026\004\073" +
    "\005\074\006\075\007\071\010\101\011\076\030\070\055" +
    "\072\060\066\100\077\001\002\000\026\004\073\005\074" +
    "\006\075\007\071\010\101\011\076\030\070\055\072\060" +
    "\066\100\077\001\002\000\026\004\073\005\074\006\075" +
    "\007\071\010\101\011\076\030\070\055\072\060\066\100" +
    "\077\001\002\000\026\004\073\005\074\006\075\007\071" +
    "\010\101\011\076\030\070\055\072\060\066\100\077\001" +
    "\002\000\026\004\073\005\074\006\075\007\071\010\101" +
    "\011\076\030\070\055\072\060\066\100\077\001\002\000" +
    "\026\004\073\005\074\006\075\007\071\010\101\011\076" +
    "\030\070\055\072\060\066\100\077\001\002\000\026\004" +
    "\073\005\074\006\075\007\071\010\101\011\076\030\070" +
    "\055\072\060\066\100\077\001\002\000\026\004\073\005" +
    "\074\006\075\007\071\010\101\011\076\030\070\055\072" +
    "\060\066\100\077\001\002\000\026\004\073\005\074\006" +
    "\075\007\071\010\101\011\076\030\070\055\072\060\066" +
    "\100\077\001\002\000\026\004\073\005\074\006\075\007" +
    "\071\010\101\011\076\030\070\055\072\060\066\100\077" +
    "\001\002\000\026\004\073\005\074\006\075\007\071\010" +
    "\101\011\076\030\070\055\072\060\066\100\077\001\002" +
    "\000\026\004\073\005\074\006\075\007\071\010\101\011" +
    "\076\030\070\055\072\060\066\100\077\001\002\000\026" +
    "\004\073\005\074\006\075\007\071\010\101\011\076\030" +
    "\070\055\072\060\066\100\077\001\002\000\056\023\uffc1" +
    "\031\uffc1\034\uffc1\037\uffc1\040\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\113\066\107\067\uffc1" +
    "\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\001\002\000\056\023\uffbc\031\uffbc\034\uffbc" +
    "\037\uffbc\040\uffbc\056\uffbc\057\106\060\103\062\uffbc\063" +
    "\120\064\112\065\113\066\107\067\111\070\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\001" +
    "\002\000\056\023\uffb5\031\uffb5\034\uffb5\037\uffb5\040\uffb5" +
    "\056\uffb5\057\106\060\103\062\uffb5\063\120\064\112\065" +
    "\113\066\107\067\111\070\117\071\110\072\105\073\114" +
    "\074\104\075\115\076\uffb5\077\102\001\002\000\056\023" +
    "\uffb7\031\uffb7\034\uffb7\037\uffb7\040\uffb7\056\uffb7\057\106" +
    "\060\103\062\uffb7\063\120\064\112\065\113\066\107\067" +
    "\111\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\001\002\000\056\023\uffb9\031\uffb9\034" +
    "\uffb9\037\uffb9\040\uffb9\056\uffb9\057\106\060\103\062\uffb9" +
    "\063\120\064\112\065\113\066\107\067\111\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\001\002\000\052\023\uffbf\031\uffbf\034\uffbf\037\uffbf\040" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\001\002\000\056\023\uffc0\031\uffc0" +
    "\034\uffc0\037\uffc0\040\uffc0\056\uffc0\057\uffc0\060\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\113\066\107\067\uffc0\070\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\001\002\000\056\023\uffbd\031\uffbd\034\uffbd\037\uffbd" +
    "\040\uffbd\056\uffbd\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\113\066\107\067\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002\000" +
    "\056\023\uffbb\031\uffbb\034\uffbb\037\uffbb\040\uffbb\056\uffbb" +
    "\057\106\060\103\062\uffbb\063\120\064\112\065\113\066" +
    "\107\067\111\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\076\uffbb\077\uffbb\001\002\000\052\023\uffbe\031" +
    "\uffbe\034\uffbe\037\uffbe\040\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\067\uffbe\070\uffbe\071\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\001\002" +
    "\000\056\023\uffc3\031\uffc3\034\uffc3\037\uffc3\040\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\062\uffc3\063\120\064\112\065\113" +
    "\066\107\067\111\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000\056\023\uffba" +
    "\031\uffba\034\uffba\037\uffba\040\uffba\056\uffba\057\106\060" +
    "\103\062\uffba\063\120\064\112\065\113\066\107\067\111" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\001\002\000\056\023\uffb8\031\uffb8\034\uffb8" +
    "\037\uffb8\040\uffb8\056\uffb8\057\106\060\103\062\uffb8\063" +
    "\120\064\112\065\113\066\107\067\111\070\uffb8\071\uffb8" +
    "\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\001" +
    "\002\000\056\023\uffc2\031\uffc2\034\uffc2\037\uffc2\040\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\062\uffc2\063\120\064\112\065" +
    "\113\066\107\067\111\070\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002\000\056\023" +
    "\uffb6\031\uffb6\034\uffb6\037\uffb6\040\uffb6\056\uffb6\057\106" +
    "\060\103\062\uffb6\063\120\064\112\065\113\066\107\067" +
    "\111\070\117\071\110\072\105\073\114\074\104\075\115" +
    "\076\uffb6\077\uffb6\001\002\000\056\023\uffb4\031\uffb4\034" +
    "\uffb4\037\uffb4\040\uffb4\056\uffb4\057\106\060\103\062\uffb4" +
    "\063\120\064\112\065\113\066\107\067\111\070\117\071" +
    "\110\072\105\073\114\074\104\075\115\076\uffb4\077\uffb4" +
    "\001\002\000\026\004\073\005\074\006\075\007\071\010" +
    "\101\011\076\030\070\055\072\060\066\100\077\001\002" +
    "\000\010\050\143\052\144\053\145\001\002\000\004\055" +
    "\153\001\002\000\004\055\150\001\002\000\004\055\146" +
    "\001\002\000\004\056\147\001\002\000\056\023\uffa8\031" +
    "\uffa8\034\uffa8\037\uffa8\040\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8" +
    "\077\uffa8\001\002\000\026\004\073\005\074\006\075\007" +
    "\071\010\101\011\076\030\070\055\072\060\066\100\077" +
    "\001\002\000\042\056\152\057\106\060\103\063\120\064" +
    "\112\065\113\066\107\067\111\070\117\071\110\072\105" +
    "\073\114\074\104\075\115\076\116\077\102\001\002\000" +
    "\056\023\uffa9\031\uffa9\034\uffa9\037\uffa9\040\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9" +
    "\075\uffa9\076\uffa9\077\uffa9\001\002\000\026\004\073\005" +
    "\074\006\075\007\071\010\101\011\076\030\070\055\072" +
    "\060\066\100\077\001\002\000\042\056\155\057\106\060" +
    "\103\063\120\064\112\065\113\066\107\067\111\070\117" +
    "\071\110\072\105\073\114\074\104\075\115\076\116\077" +
    "\102\001\002\000\056\023\uffaa\031\uffaa\034\uffaa\037\uffaa" +
    "\040\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\001\002\000" +
    "\042\037\157\057\106\060\103\063\120\064\112\065\113" +
    "\066\107\067\111\070\117\071\110\072\105\073\114\074" +
    "\104\075\115\076\116\077\102\001\002\000\060\023\uffac" +
    "\031\uffac\034\uffac\036\160\037\uffac\040\uffac\056\uffac\057" +
    "\uffac\060\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\001\002\000\026\004\073\005\074" +
    "\006\075\007\071\010\101\011\076\030\070\055\072\060" +
    "\066\100\077\001\002\000\042\037\162\057\106\060\103" +
    "\063\120\064\112\065\113\066\107\067\111\070\117\071" +
    "\110\072\105\073\114\074\104\075\115\076\116\077\102" +
    "\001\002\000\056\023\uffab\031\uffab\034\uffab\037\uffab\040" +
    "\uffab\056\uffab\057\uffab\060\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\001\002\000\042" +
    "\056\164\057\106\060\103\063\120\064\112\065\113\066" +
    "\107\067\111\070\117\071\110\072\105\073\114\074\104" +
    "\075\115\076\116\077\102\001\002\000\056\023\uffa7\031" +
    "\uffa7\034\uffa7\037\uffa7\040\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\077\uffa7\001\002\000\026\004\073\005\074\006\075\007" +
    "\071\010\101\011\076\030\070\055\072\060\066\100\077" +
    "\001\002\000\042\031\167\057\106\060\103\063\120\064" +
    "\112\065\113\066\107\067\111\070\117\071\110\072\105" +
    "\073\114\074\104\075\115\076\116\077\102\001\002\000" +
    "\014\041\045\042\050\043\044\044\046\045\043\001\002" +
    "\000\004\056\171\001\002\000\056\023\uffad\031\uffad\034" +
    "\uffad\037\uffad\040\uffad\056\uffad\057\uffad\060\uffad\062\uffad" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\001\002\000\026\004\073\005\074\006\075\007\071\010" +
    "\101\011\076\030\070\055\072\060\066\100\077\001\002" +
    "\000\006\037\uffe0\040\uffe0\001\002\000\044\037\uffe2\040" +
    "\uffe2\057\106\060\103\063\120\064\112\065\113\066\107" +
    "\067\111\070\117\071\110\072\105\073\114\074\104\075" +
    "\115\076\116\077\102\001\002\000\056\023\uffc4\031\uffc4" +
    "\034\uffc4\037\uffc4\040\uffc4\056\uffc4\057\uffc4\060\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\001\002\000\006\037\177\040\172\001\002\000\006" +
    "\037\uffdf\040\uffdf\001\002\000\026\004\073\005\074\006" +
    "\075\007\071\010\101\011\076\030\070\055\072\060\066" +
    "\100\077\001\002\000\006\037\202\040\172\001\002\000" +
    "\004\023\uffdb\001\002\000\042\023\uffde\057\106\060\103" +
    "\063\120\064\112\065\113\066\107\067\111\070\117\071" +
    "\110\072\105\073\114\074\104\075\115\076\116\077\102" +
    "\001\002\000\014\041\045\042\050\043\044\044\046\045" +
    "\043\001\002\000\004\073\206\001\002\000\004\023\uffdc" +
    "\001\002\000\036\002\ufff2\003\ufff2\011\ufff2\012\ufff2\014" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\025\ufff2" +
    "\032\ufff2\033\ufff2\035\ufff2\001\002\000\042\034\211\057" +
    "\106\060\103\063\120\064\112\065\113\066\107\067\111" +
    "\070\117\071\110\072\105\073\114\074\104\075\115\076" +
    "\116\077\102\001\002\000\030\004\073\005\074\006\075" +
    "\007\071\010\101\011\076\015\212\030\070\055\072\060" +
    "\066\100\077\001\002\000\004\062\226\001\002\000\032" +
    "\004\073\005\074\006\075\007\071\010\101\011\076\015" +
    "\212\030\070\035\224\055\072\060\066\100\077\001\002" +
    "\000\032\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\015\uffcd\030\uffcd\035\uffcd\055\uffcd\060\uffcd\100\uffcd" +
    "\001\002\000\042\057\106\060\103\062\216\063\120\064" +
    "\112\065\113\066\107\067\111\070\117\071\110\072\105" +
    "\073\114\074\104\075\115\076\116\077\102\001\002\000" +
    "\004\073\217\001\002\000\004\034\220\001\002\000\032" +
    "\003\025\011\015\012\014\014\035\016\010\017\034\020" +
    "\016\021\022\022\005\025\013\032\024\033\027\001\002" +
    "\000\034\003\025\011\015\012\014\014\035\016\010\017" +
    "\034\020\016\021\022\022\005\025\013\032\024\033\027" +
    "\035\223\001\002\000\036\002\uffff\003\uffff\011\uffff\012" +
    "\uffff\014\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\025\uffff\032\uffff\033\uffff\035\uffff\001\002\000\032\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0" +
    "\030\uffd0\035\uffd0\055\uffd0\060\uffd0\100\uffd0\001\002\000" +
    "\036\002\uffcc\003\uffcc\011\uffcc\012\uffcc\014\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\025\uffcc\032\uffcc\033" +
    "\uffcc\035\uffcc\001\002\000\032\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\015\uffce\030\uffce\035\uffce\055" +
    "\uffce\060\uffce\100\uffce\001\002\000\004\073\227\001\002" +
    "\000\004\034\230\001\002\000\032\003\025\011\015\012" +
    "\014\014\035\016\010\017\034\020\016\021\022\022\005" +
    "\025\013\032\024\033\027\001\002\000\034\003\025\011" +
    "\015\012\014\014\035\016\010\017\034\020\016\021\022" +
    "\022\005\025\013\032\024\033\027\035\232\001\002\000" +
    "\032\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\015\uffcf\030\uffcf\035\uffcf\055\uffcf\060\uffcf\100\uffcf\001" +
    "\002\000\004\011\234\001\002\000\006\036\252\062\251" +
    "\001\002\000\004\023\236\001\002\000\026\004\073\005" +
    "\074\006\075\007\071\010\101\011\076\030\070\055\072" +
    "\060\066\100\077\001\002\000\042\023\240\057\106\060" +
    "\103\063\120\064\112\065\113\066\107\067\111\070\117" +
    "\071\110\072\105\073\114\074\104\075\115\076\116\077" +
    "\102\001\002\000\004\011\241\001\002\000\012\036\252" +
    "\057\253\060\254\062\251\001\002\000\004\056\uffca\001" +
    "\002\000\004\056\uffc9\001\002\000\004\056\245\001\002" +
    "\000\004\034\246\001\002\000\032\003\025\011\015\012" +
    "\014\014\035\016\010\017\034\020\016\021\022\022\005" +
    "\025\013\032\024\033\027\001\002\000\034\003\025\011" +
    "\015\012\014\014\035\016\010\017\034\020\016\021\022" +
    "\022\005\025\013\032\024\033\027\035\250\001\002\000" +
    "\036\002\uffcb\003\uffcb\011\uffcb\012\uffcb\014\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\025\uffcb\032\uffcb\033" +
    "\uffcb\035\uffcb\001\002\000\026\004\073\005\074\006\075" +
    "\007\071\010\101\011\076\030\070\055\072\060\066\100" +
    "\077\001\002\000\026\004\073\005\074\006\075\007\071" +
    "\010\101\011\076\030\070\055\072\060\066\100\077\001" +
    "\002\000\004\057\257\001\002\000\004\060\256\001\002" +
    "\000\006\023\uffd4\056\uffd4\001\002\000\006\023\uffd5\056" +
    "\uffd5\001\002\000\006\023\uffd6\056\uffd6\001\002\000\042" +
    "\037\261\057\106\060\103\063\120\064\112\065\113\066" +
    "\107\067\111\070\117\071\110\072\105\073\114\074\104" +
    "\075\115\076\116\077\102\001\002\000\006\036\263\062" +
    "\262\001\002\000\026\004\073\005\074\006\075\007\071" +
    "\010\101\011\076\030\070\055\072\060\066\100\077\001" +
    "\002\000\026\004\073\005\074\006\075\007\071\010\101" +
    "\011\076\030\070\055\072\060\066\100\077\001\002\000" +
    "\042\037\265\057\106\060\103\063\120\064\112\065\113" +
    "\066\107\067\111\070\117\071\110\072\105\073\114\074" +
    "\104\075\115\076\116\077\102\001\002\000\004\062\266" +
    "\001\002\000\026\004\073\005\074\006\075\007\071\010" +
    "\101\011\076\030\070\055\072\060\066\100\077\001\002" +
    "\000\044\023\uffd7\056\uffd7\057\106\060\103\063\120\064" +
    "\112\065\113\066\107\067\111\070\117\071\110\072\105" +
    "\073\114\074\104\075\115\076\116\077\102\001\002\000" +
    "\044\023\uffd8\056\uffd8\057\106\060\103\063\120\064\112" +
    "\065\113\066\107\067\111\070\117\071\110\072\105\073" +
    "\114\074\104\075\115\076\116\077\102\001\002\000\044" +
    "\023\uffd9\056\uffd9\057\106\060\103\063\120\064\112\065" +
    "\113\066\107\067\111\070\117\071\110\072\105\073\114" +
    "\074\104\075\115\076\116\077\102\001\002\000\036\002" +
    "\ufffb\003\ufffb\011\ufffb\012\ufffb\014\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\025\ufffb\032\ufffb\033\ufffb\035" +
    "\ufffb\001\002\000\036\002\ufff5\003\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\025" +
    "\ufff5\032\ufff5\033\ufff5\035\ufff5\001\002\000\036\002\ufffc" +
    "\003\ufffc\011\ufffc\012\ufffc\014\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\025\ufffc\032\ufffc\033\ufffc\035\ufffc" +
    "\001\002\000\036\002\ufffa\003\ufffa\011\ufffa\012\ufffa\014" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\025\ufffa" +
    "\032\ufffa\033\ufffa\035\ufffa\001\002\000\036\002\ufff1\003" +
    "\ufff1\011\ufff1\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\025\ufff1\032\ufff1\033\ufff1\035\ufff1\001" +
    "\002\000\036\002\ufffd\003\ufffd\011\ufffd\012\ufffd\014\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\025\ufffd\032" +
    "\ufffd\033\ufffd\035\ufffd\001\002\000\032\003\025\011\015" +
    "\012\014\014\035\016\010\017\034\020\016\021\022\022" +
    "\005\025\013\032\024\033\027\001\002\000\034\003\025" +
    "\011\015\012\014\014\035\016\010\017\034\020\016\021" +
    "\022\022\005\025\013\032\024\033\027\035\302\001\002" +
    "\000\004\016\303\001\002\000\004\055\304\001\002\000" +
    "\026\004\073\005\074\006\075\007\071\010\101\011\076" +
    "\030\070\055\072\060\066\100\077\001\002\000\042\056" +
    "\306\057\106\060\103\063\120\064\112\065\113\066\107" +
    "\067\111\070\117\071\110\072\105\073\114\074\104\075" +
    "\115\076\116\077\102\001\002\000\004\023\uffc7\001\002" +
    "\000\014\047\311\051\310\052\313\053\314\054\312\001" +
    "\002\000\004\055\327\001\002\000\004\055\324\001\002" +
    "\000\004\055\322\001\002\000\004\055\317\001\002\000" +
    "\004\055\315\001\002\000\004\056\316\001\002\000\004" +
    "\023\uffec\001\002\000\026\004\073\005\074\006\075\007" +
    "\071\010\101\011\076\030\070\055\072\060\066\100\077" +
    "\001\002\000\042\056\321\057\106\060\103\063\120\064" +
    "\112\065\113\066\107\067\111\070\117\071\110\072\105" +
    "\073\114\074\104\075\115\076\116\077\102\001\002\000" +
    "\004\023\uffed\001\002\000\004\056\323\001\002\000\004" +
    "\023\uffeb\001\002\000\026\004\073\005\074\006\075\007" +
    "\071\010\101\011\076\030\070\055\072\060\066\100\077" +
    "\001\002\000\042\056\326\057\106\060\103\063\120\064" +
    "\112\065\113\066\107\067\111\070\117\071\110\072\105" +
    "\073\114\074\104\075\115\076\116\077\102\001\002\000" +
    "\004\023\uffef\001\002\000\026\004\073\005\074\006\075" +
    "\007\071\010\101\011\076\030\070\055\072\060\066\100" +
    "\077\001\002\000\042\040\331\057\106\060\103\063\120" +
    "\064\112\065\113\066\107\067\111\070\117\071\110\072" +
    "\105\073\114\074\104\075\115\076\116\077\102\001\002" +
    "\000\026\004\073\005\074\006\075\007\071\010\101\011" +
    "\076\030\070\055\072\060\066\100\077\001\002\000\042" +
    "\056\333\057\106\060\103\063\120\064\112\065\113\066" +
    "\107\067\111\070\117\071\110\072\105\073\114\074\104" +
    "\075\115\076\116\077\102\001\002\000\004\023\uffee\001" +
    "\002\000\026\004\073\005\074\006\075\007\071\010\101" +
    "\011\076\030\070\055\072\060\066\100\077\001\002\000" +
    "\042\056\336\057\106\060\103\063\120\064\112\065\113" +
    "\066\107\067\111\070\117\071\110\072\105\073\114\074" +
    "\104\075\115\076\116\077\102\001\002\000\004\034\337" +
    "\001\002\000\032\003\025\011\015\012\014\014\035\016" +
    "\010\017\034\020\016\021\022\022\005\025\013\032\024" +
    "\033\027\001\002\000\034\003\025\011\015\012\014\014" +
    "\035\016\010\017\034\020\016\021\022\022\005\025\013" +
    "\032\024\033\027\035\341\001\002\000\040\002\uffd3\003" +
    "\uffd3\011\uffd3\012\uffd3\013\342\014\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\025\uffd3\032\uffd3\033\uffd3\035" +
    "\uffd3\001\002\000\006\012\014\034\343\001\002\000\032" +
    "\003\025\011\015\012\014\014\035\016\010\017\034\020" +
    "\016\021\022\022\005\025\013\032\024\033\027\001\002" +
    "\000\036\002\uffd2\003\uffd2\011\uffd2\012\uffd2\014\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffd2\032\uffd2" +
    "\033\uffd2\035\uffd2\001\002\000\034\003\025\011\015\012" +
    "\014\014\035\016\010\017\034\020\016\021\022\022\005" +
    "\025\013\032\024\033\027\035\346\001\002\000\036\002" +
    "\uffd1\003\uffd1\011\uffd1\012\uffd1\014\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\025\uffd1\032\uffd1\033\uffd1\035" +
    "\uffd1\001\002\000\004\027\350\001\002\000\004\055\351" +
    "\001\002\000\026\004\073\005\074\006\075\007\071\010" +
    "\101\011\076\030\070\055\072\060\066\100\077\001\002" +
    "\000\042\056\353\057\106\060\103\063\120\064\112\065" +
    "\113\066\107\067\111\070\117\071\110\072\105\073\114" +
    "\074\104\075\115\076\116\077\102\001\002\000\004\023" +
    "\uffea\001\002\000\004\002\001\001\002\000\036\002\ufff3" +
    "\003\ufff3\011\ufff3\012\ufff3\014\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\025\ufff3\032\ufff3\033\ufff3\035\ufff3" +
    "\001\002\000\026\004\073\005\074\006\075\007\071\010" +
    "\101\011\076\030\070\055\072\060\066\100\077\001\002" +
    "\000\042\056\360\057\106\060\103\063\120\064\112\065" +
    "\113\066\107\067\111\070\117\071\110\072\105\073\114" +
    "\074\104\075\115\076\116\077\102\001\002\000\004\034" +
    "\361\001\002\000\032\003\025\011\015\012\014\014\035" +
    "\016\010\017\034\020\016\021\022\022\005\025\013\032" +
    "\024\033\027\001\002\000\034\003\025\011\015\012\014" +
    "\014\035\016\010\017\034\020\016\021\022\022\005\025" +
    "\013\032\024\033\027\035\363\001\002\000\036\002\uffc8" +
    "\003\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\025\uffc8\032\uffc8\033\uffc8\035\uffc8" +
    "\001\002\000\036\002\ufff4\003\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4" +
    "\032\ufff4\033\ufff4\035\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\042\002\011\003\016\007\017\010\022\011" +
    "\030\012\032\013\025\014\006\015\020\017\027\021\005" +
    "\022\031\023\003\024\010\025\035\030\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\254" +
    "\001\001\000\002\001\001\000\036\007\221\010\022\011" +
    "\030\012\032\013\025\014\006\015\020\017\027\021\005" +
    "\022\031\023\003\024\010\025\035\030\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\061\001\001\000\006\005\175" +
    "\026\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\066\026\077\001\001\000\004" +
    "\026\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\136\001\001\000\004\026\135\001\001\000" +
    "\004\026\134\001\001\000\004\026\133\001\001\000\004" +
    "\026\132\001\001\000\004\026\131\001\001\000\004\026" +
    "\130\001\001\000\004\026\127\001\001\000\004\026\126" +
    "\001\001\000\004\026\125\001\001\000\004\026\124\001" +
    "\001\000\004\026\123\001\001\000\004\026\122\001\001" +
    "\000\004\026\121\001\001\000\004\026\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\165\001" +
    "\001\000\002\001\001\000\004\027\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\200\026\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\212" +
    "\016\213\026\214\001\001\000\002\001\001\000\006\016" +
    "\224\026\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\220\007" +
    "\017\010\022\011\030\012\032\013\025\014\006\015\020" +
    "\017\027\021\005\022\031\023\003\024\010\025\035\030" +
    "\036\001\001\000\036\007\221\010\022\011\030\012\032" +
    "\013\025\014\006\015\020\017\027\021\005\022\031\023" +
    "\003\024\010\025\035\030\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\230\007\017" +
    "\010\022\011\030\012\032\013\025\014\006\015\020\017" +
    "\027\021\005\022\031\023\003\024\010\025\035\030\036" +
    "\001\001\000\036\007\221\010\022\011\030\012\032\013" +
    "\025\014\006\015\020\017\027\021\005\022\031\023\003" +
    "\024\010\025\035\030\036\001\001\000\002\001\001\000" +
    "\004\012\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\236\001\001\000\002\001\001\000\010\012" +
    "\241\013\242\020\243\001\001\000\004\031\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\246\007\017\010\022\011\030" +
    "\012\032\013\025\014\006\015\020\017\027\021\005\022" +
    "\031\023\003\024\010\025\035\030\036\001\001\000\036" +
    "\007\221\010\022\011\030\012\032\013\025\014\006\015" +
    "\020\017\027\021\005\022\031\023\003\024\010\025\035" +
    "\030\036\001\001\000\002\001\001\000\004\026\270\001" +
    "\001\000\004\026\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\267" +
    "\001\001\000\004\026\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\300\007\017\010" +
    "\022\011\030\012\032\013\025\014\006\015\020\017\027" +
    "\021\005\022\031\023\003\024\010\025\035\030\036\001" +
    "\001\000\036\007\221\010\022\011\030\012\032\013\025" +
    "\014\006\015\020\017\027\021\005\022\031\023\003\024" +
    "\010\025\035\030\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\327\001\001\000" +
    "\002\001\001\000\004\026\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\337\007\017\010\022" +
    "\011\030\012\032\013\025\014\006\015\020\017\027\021" +
    "\005\022\031\023\003\024\010\025\035\030\036\001\001" +
    "\000\036\007\221\010\022\011\030\012\032\013\025\014" +
    "\006\015\020\017\027\021\005\022\031\023\003\024\010" +
    "\025\035\030\036\001\001\000\002\001\001\000\004\014" +
    "\343\001\001\000\040\003\344\007\017\010\022\011\030" +
    "\012\032\013\025\014\006\015\020\017\027\021\005\022" +
    "\031\023\003\024\010\025\035\030\036\001\001\000\002" +
    "\001\001\000\036\007\221\010\022\011\030\012\032\013" +
    "\025\014\006\015\020\017\027\021\005\022\031\023\003" +
    "\024\010\025\035\030\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\361\007\017\010\022\011" +
    "\030\012\032\013\025\014\006\015\020\017\027\021\005" +
    "\022\031\023\003\024\010\025\035\030\036\001\001\000" +
    "\036\007\221\010\022\011\030\012\032\013\025\014\006" +
    "\015\020\017\027\021\005\022\031\023\003\024\010\025" +
    "\035\030\036\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    Lexer lex;
    Parser(Lexer lex){this.lex = lex;}

    public LinkedList<CompError> sintacticErrors = new LinkedList<>();

    public void syntax_error(Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICR, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }

    public void unrecovered_syntax_error (Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICU, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCTIONS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= PRINT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLARATION END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= ASSIGNMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= INCREMENT_DECREMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= MATCH_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOP_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOP_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOP_DO END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= BREAKS END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= CONTINUES END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= LIST_INST END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= error END 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= error 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_INST ::= ID DOT PUSH PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Push(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_INST ::= ID DOT SET PAR_START EXPRESSION COMMA EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Set(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_INST ::= ID DOT REMOVE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_INST ::= ID DOT POP PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Pop(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_INST ::= ID DOT REVERSE PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Reverse(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PRINT ::= CONSOLE DOT LOG PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MUTABILITY ::= CONST 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MUTABILITY ::= LET 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TYPE_RW ::= INT_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.WHOLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPE_RW ::= DOUBLE_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPE_RW ::= BOOL_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TYPE_RW ::= CHAR_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPE_RW ::= STRING_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARRAY_DATA ::= ARRAY_DATA COMMA EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARRAY_DATA ::= EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARRAY2D_DATA ::= ARRAY2D_DATA COMMA SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRAY2D_DATA ::= SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruction>>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARATION ::= MUTABILITY ID COLON LIST LESS_THAN TYPE_RW GREATER_THAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ListDeclaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END EQUALS SBRA_START ARRAY_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END SBRA_START SBRA_END EQUALS SBRA_START ARRAY2D_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2DDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIGNMENT ::= ID EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrAssignment(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arr2DAssignment(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COUNTER ::= PLUS PLUS 
            {
              String RESULT =null;
		 RESULT = "plus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COUNTER ::= MINUS MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INCREMENT_DECREMENT ::= ID COUNTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementDecrement(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENT_DECREMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Instruction> elseif = new LinkedList<>(); elseif.add(c); RESULT = new If(a, b, elseif, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASE ::= EXPRESSION EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASE ::= DEFAULT EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Default(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASES ::= CASES CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASES ::= CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MATCH_SENTENCE ::= MATCH EXPRESSION BRA_START CASES BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOOP_FOR ::= FOR PAR_START ASSIGNMENT END EXPRESSION END STEP_FOR PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STEP_FOR ::= ASSIGNMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STEP_FOR ::= INCREMENT_DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOOP_WHILE ::= WHILE PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOOP_DO ::= DO BRA_START INSTRUCTIONS BRA_END WHILE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_DO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BREAKS ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAKS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTINUES ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUES",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESSION ::= MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitaryNegation(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Addition(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Substraction(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESSION ::= EXPRESSION MULTIPLICATION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplication(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESSION ::= EXPRESSION DIVISION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESSION ::= EXPRESSION POWER EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Power(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSION ::= EXPRESSION ROOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Root(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSION ::= EXPRESSION MODULO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESSION ::= EXPRESSION EQUALS_TO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSION ::= EXPRESSION NOT_EQUAL EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESSION ::= EXPRESSION LESS_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESSION ::= EXPRESSION GREATER_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESSION ::= EXPRESSION LESS_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESSION ::= EXPRESSION GREATER_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESSION ::= EXPRESSION AND EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESSION ::= EXPRESSION OR EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESSION ::= NOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESSION ::= WHOLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Integer.parseInt(a),new Type(dataType.WHOLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESSION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a, new Type(dataType.STRING), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESSION ::= DOUBLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(new Double(a),new Type(dataType.DOUBLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESSION ::= BOOLEAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Boolean.parseBoolean(a), new Type(dataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESSION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a.charAt(0), new Type(dataType.CHAR), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESSION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Access(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESSION ::= CAST PAR_START EXPRESSION AS TYPE_RW PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cast(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrAccess(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Arr2DAccess(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESSION ::= ID DOT GET PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Get(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESSION ::= ID DOT REMOVE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESSION ::= ID DOT POP PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Pop(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESSION ::= PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
