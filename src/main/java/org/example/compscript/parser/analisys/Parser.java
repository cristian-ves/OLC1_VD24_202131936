
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.compscript.parser.analisys;

import java_cup.runtime.*;
import java.util.LinkedList;
import org.example.compscript.parser.abstract_.Instruction;
import org.example.compscript.parser.symbol.*;
import org.example.compscript.parser.instructions.Print;
import org.example.compscript.parser.instructions.Declaration;
import org.example.compscript.parser.instructions.Assignment;
import org.example.compscript.parser.instructions.IncrementDecrement;
import org.example.compscript.parser.instructions.If;
import org.example.compscript.parser.instructions.match.Match;
import org.example.compscript.parser.instructions.match.Case;
import org.example.compscript.parser.instructions.match.Default;
import org.example.compscript.parser.expresions.Native;
import org.example.compscript.parser.expresions.operators.relational.*;
import org.example.compscript.parser.expresions.operators.arithmetic.*;
import org.example.compscript.parser.expresions.operators.logic.*;
import org.example.compscript.parser.exceptions.*;
import org.example.compscript.parser.expresions.cast.Cast;
import org.example.compscript.parser.expresions.variables.Access;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\006\010\000\002" +
    "\017\003\000\002\017\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\007\010\000\002\007\006\000\002\010\005\000" +
    "\002\020\004\000\002\020\004\000\002\011\004\000\002" +
    "\012\011\000\002\012\015\000\002\012\021\000\002\014" +
    "\010\000\002\014\010\000\002\004\004\000\002\004\003" +
    "\000\002\013\007\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\010\000\002\015\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\003\017\011\014\012\012\014\005\025" +
    "\021\032\024\033\023\001\002\000\004\023\205\001\002" +
    "\000\026\004\035\005\036\006\037\007\033\010\043\011" +
    "\040\030\032\043\034\046\031\066\041\001\002\000\004" +
    "\023\162\001\002\000\004\002\161\001\002\000\004\011" +
    "\154\001\002\000\024\002\ufff9\003\ufff9\011\ufff9\012\ufff9" +
    "\014\ufff9\025\ufff9\032\ufff9\033\ufff9\035\ufff9\001\002\000" +
    "\004\043\133\001\002\000\024\002\ufff8\003\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\025\ufff8\032\ufff8\033\ufff8\035\ufff8\001" +
    "\002\000\010\045\125\046\126\050\124\001\002\000\024" +
    "\002\ufffe\003\ufffe\011\ufffe\012\ufffe\014\ufffe\025\ufffe\032" +
    "\ufffe\033\ufffe\035\ufffe\001\002\000\022\002\000\003\017" +
    "\011\014\012\012\014\005\025\021\032\024\033\023\001" +
    "\002\000\004\023\122\001\002\000\004\023\121\001\002" +
    "\000\004\026\026\001\002\000\004\023\025\001\002\000" +
    "\004\011\ufff4\001\002\000\004\011\ufff5\001\002\000\024" +
    "\002\ufffc\003\ufffc\011\ufffc\012\ufffc\014\ufffc\025\ufffc\032" +
    "\ufffc\033\ufffc\035\ufffc\001\002\000\004\027\027\001\002" +
    "\000\004\043\030\001\002\000\026\004\035\005\036\006" +
    "\037\007\033\010\043\011\040\030\032\043\034\046\031" +
    "\066\041\001\002\000\026\004\035\005\036\006\037\007" +
    "\033\010\043\011\040\030\032\043\034\046\031\066\041" +
    "\001\002\000\004\043\106\001\002\000\052\023\uffcc\031" +
    "\uffcc\034\uffcc\044\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\001\002" +
    "\000\026\004\035\005\036\006\037\007\033\010\043\011" +
    "\040\030\032\043\034\046\031\066\041\001\002\000\052" +
    "\023\uffcf\031\uffcf\034\uffcf\044\uffcf\045\uffcf\046\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\001\002\000\052\023\uffce\031\uffce\034\uffce\044\uffce" +
    "\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\001\002\000\052\023\uffcd\031" +
    "\uffcd\034\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\001\002" +
    "\000\052\023\uffca\031\uffca\034\uffca\044\uffca\045\uffca\046" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\065\uffca\001\002\000\026\004\035\005\036\006\037" +
    "\007\033\010\043\011\040\030\032\043\034\046\031\066" +
    "\041\001\002\000\042\044\046\045\051\046\044\051\063" +
    "\052\055\053\056\054\052\055\053\056\062\057\054\060" +
    "\050\061\057\062\047\063\060\064\061\065\045\001\002" +
    "\000\052\023\uffcb\031\uffcb\034\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\001\002\000\026\004\035\005\036\006\037" +
    "\007\033\010\043\011\040\030\032\043\034\046\031\066" +
    "\041\001\002\000\026\004\035\005\036\006\037\007\033" +
    "\010\043\011\040\030\032\043\034\046\031\066\041\001" +
    "\002\000\004\023\ufff6\001\002\000\026\004\035\005\036" +
    "\006\037\007\033\010\043\011\040\030\032\043\034\046" +
    "\031\066\041\001\002\000\026\004\035\005\036\006\037" +
    "\007\033\010\043\011\040\030\032\043\034\046\031\066" +
    "\041\001\002\000\026\004\035\005\036\006\037\007\033" +
    "\010\043\011\040\030\032\043\034\046\031\066\041\001" +
    "\002\000\026\004\035\005\036\006\037\007\033\010\043" +
    "\011\040\030\032\043\034\046\031\066\041\001\002\000" +
    "\026\004\035\005\036\006\037\007\033\010\043\011\040" +
    "\030\032\043\034\046\031\066\041\001\002\000\026\004" +
    "\035\005\036\006\037\007\033\010\043\011\040\030\032" +
    "\043\034\046\031\066\041\001\002\000\026\004\035\005" +
    "\036\006\037\007\033\010\043\011\040\030\032\043\034" +
    "\046\031\066\041\001\002\000\026\004\035\005\036\006" +
    "\037\007\033\010\043\011\040\030\032\043\034\046\031" +
    "\066\041\001\002\000\026\004\035\005\036\006\037\007" +
    "\033\010\043\011\040\030\032\043\034\046\031\066\041" +
    "\001\002\000\026\004\035\005\036\006\037\007\033\010" +
    "\043\011\040\030\032\043\034\046\031\066\041\001\002" +
    "\000\026\004\035\005\036\006\037\007\033\010\043\011" +
    "\040\030\032\043\034\046\031\066\041\001\002\000\026" +
    "\004\035\005\036\006\037\007\033\010\043\011\040\030" +
    "\032\043\034\046\031\066\041\001\002\000\026\004\035" +
    "\005\036\006\037\007\033\010\043\011\040\030\032\043" +
    "\034\046\031\066\041\001\002\000\052\023\uffdd\031\uffdd" +
    "\034\uffdd\044\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\053\056\054\052\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\001\002\000" +
    "\052\023\uffd8\031\uffd8\034\uffd8\044\uffd8\045\051\046\044" +
    "\050\uffd8\051\063\052\055\053\056\054\052\055\053\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8" +
    "\065\uffd8\001\002\000\052\023\uffd1\031\uffd1\034\uffd1\044" +
    "\uffd1\045\051\046\044\050\uffd1\051\063\052\055\053\056" +
    "\054\052\055\053\056\062\057\054\060\050\061\057\062" +
    "\047\063\060\064\uffd1\065\045\001\002\000\052\023\uffd3" +
    "\031\uffd3\034\uffd3\044\uffd3\045\051\046\044\050\uffd3\051" +
    "\063\052\055\053\056\054\052\055\053\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\001" +
    "\002\000\052\023\uffd5\031\uffd5\034\uffd5\044\uffd5\045\051" +
    "\046\044\050\uffd5\051\063\052\055\053\056\054\052\055" +
    "\053\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\001\002\000\046\023\uffdb\031\uffdb\034" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\001\002\000\052\023\uffdc\031\uffdc" +
    "\034\uffdc\044\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\056\054\052\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\001\002\000" +
    "\052\023\uffd7\031\uffd7\034\uffd7\044\uffd7\045\051\046\044" +
    "\050\uffd7\051\063\052\055\053\056\054\052\055\053\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\001\002\000\052\023\uffd9\031\uffd9\034\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\053\056" +
    "\054\052\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\001\002\000\046\023\uffda" +
    "\031\uffda\034\uffda\044\uffda\045\uffda\046\uffda\050\uffda\051" +
    "\uffda\052\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\001\002\000\052\023" +
    "\uffdf\031\uffdf\034\uffdf\044\uffdf\045\uffdf\046\uffdf\050\uffdf" +
    "\051\063\052\055\053\056\054\052\055\053\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\001\002\000\052\023\uffd6\031\uffd6\034\uffd6\044\uffd6\045" +
    "\051\046\044\050\uffd6\051\063\052\055\053\056\054\052" +
    "\055\053\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\001\002\000\052\023\uffd4\031\uffd4" +
    "\034\uffd4\044\uffd4\045\051\046\044\050\uffd4\051\063\052" +
    "\055\053\056\054\052\055\053\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\001\002\000" +
    "\052\023\uffd2\031\uffd2\034\uffd2\044\uffd2\045\051\046\044" +
    "\050\uffd2\051\063\052\055\053\056\054\052\055\053\056" +
    "\062\057\054\060\050\061\057\062\047\063\060\064\uffd2" +
    "\065\uffd2\001\002\000\052\023\uffde\031\uffde\034\uffde\044" +
    "\uffde\045\uffde\046\uffde\050\uffde\051\063\052\055\053\056" +
    "\054\052\055\053\056\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\063\uffde\064\uffde\065\uffde\001\002\000\052\023\uffd0" +
    "\031\uffd0\034\uffd0\044\uffd0\045\051\046\044\050\uffd0\051" +
    "\063\052\055\053\056\054\052\055\053\056\062\057\054" +
    "\060\050\061\057\062\047\063\060\064\uffd0\065\uffd0\001" +
    "\002\000\042\044\105\045\051\046\044\051\063\052\055" +
    "\053\056\054\052\055\053\056\062\057\054\060\050\061" +
    "\057\062\047\063\060\064\061\065\045\001\002\000\052" +
    "\023\uffc8\031\uffc8\034\uffc8\044\uffc8\045\uffc8\046\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\001\002\000\026\004\035\005\036\006\037\007\033" +
    "\010\043\011\040\030\032\043\034\046\031\066\041\001" +
    "\002\000\042\031\110\045\051\046\044\051\063\052\055" +
    "\053\056\054\052\055\053\056\062\057\054\060\050\061" +
    "\057\062\047\063\060\064\061\065\045\001\002\000\014" +
    "\036\113\037\116\040\112\041\114\042\111\001\002\000" +
    "\010\023\uffef\044\uffef\050\uffef\001\002\000\010\023\ufff0" +
    "\044\ufff0\050\ufff0\001\002\000\010\023\ufff3\044\ufff3\050" +
    "\ufff3\001\002\000\010\023\ufff1\044\ufff1\050\ufff1\001\002" +
    "\000\004\044\117\001\002\000\010\023\ufff2\044\ufff2\050" +
    "\ufff2\001\002\000\052\023\uffc9\031\uffc9\034\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\001\002\000\052\023\uffe0\031" +
    "\uffe0\034\uffe0\044\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\001\002" +
    "\000\024\002\ufffd\003\ufffd\011\ufffd\012\ufffd\014\ufffd\025" +
    "\ufffd\032\ufffd\033\ufffd\035\ufffd\001\002\000\024\002\ufff7" +
    "\003\ufff7\011\ufff7\012\ufff7\014\ufff7\025\ufff7\032\ufff7\033" +
    "\ufff7\035\ufff7\001\002\000\024\002\uffff\003\uffff\011\uffff" +
    "\012\uffff\014\uffff\025\uffff\032\uffff\033\uffff\035\uffff\001" +
    "\002\000\026\004\035\005\036\006\037\007\033\010\043" +
    "\011\040\030\032\043\034\046\031\066\041\001\002\000" +
    "\004\045\131\001\002\000\004\046\130\001\002\000\004" +
    "\023\uffe9\001\002\000\004\023\uffea\001\002\000\004\023" +
    "\uffeb\001\002\000\042\023\uffec\045\051\046\044\051\063" +
    "\052\055\053\056\054\052\055\053\056\062\057\054\060" +
    "\050\061\057\062\047\063\060\064\061\065\045\001\002" +
    "\000\026\004\035\005\036\006\037\007\033\010\043\011" +
    "\040\030\032\043\034\046\031\066\041\001\002\000\042" +
    "\044\135\045\051\046\044\051\063\052\055\053\056\054" +
    "\052\055\053\056\062\057\054\060\050\061\057\062\047" +
    "\063\060\064\061\065\045\001\002\000\004\034\136\001" +
    "\002\000\020\003\017\011\014\012\012\014\005\025\021" +
    "\032\024\033\023\001\002\000\022\003\017\011\014\012" +
    "\012\014\005\025\021\032\024\033\023\035\140\001\002" +
    "\000\026\002\uffe8\003\uffe8\011\uffe8\012\uffe8\013\141\014" +
    "\uffe8\025\uffe8\032\uffe8\033\uffe8\035\uffe8\001\002\000\006" +
    "\012\143\034\142\001\002\000\020\003\017\011\014\012" +
    "\012\014\005\025\021\032\024\033\023\001\002\000\004" +
    "\043\144\001\002\000\026\004\035\005\036\006\037\007" +
    "\033\010\043\011\040\030\032\043\034\046\031\066\041" +
    "\001\002\000\042\044\146\045\051\046\044\051\063\052" +
    "\055\053\056\054\052\055\053\056\062\057\054\060\050" +
    "\061\057\062\047\063\060\064\061\065\045\001\002\000" +
    "\004\034\147\001\002\000\020\003\017\011\014\012\012" +
    "\014\005\025\021\032\024\033\023\001\002\000\022\003" +
    "\017\011\014\012\012\014\005\025\021\032\024\033\023" +
    "\035\151\001\002\000\024\002\uffe6\003\uffe6\011\uffe6\012" +
    "\uffe6\014\uffe6\025\uffe6\032\uffe6\033\uffe6\035\uffe6\001\002" +
    "\000\022\003\017\011\014\012\012\014\005\025\021\032" +
    "\024\033\023\035\153\001\002\000\024\002\uffe7\003\uffe7" +
    "\011\uffe7\012\uffe7\014\uffe7\025\uffe7\032\uffe7\033\uffe7\035" +
    "\uffe7\001\002\000\004\024\155\001\002\000\014\036\113" +
    "\037\116\040\112\041\114\042\111\001\002\000\006\023" +
    "\uffed\050\157\001\002\000\026\004\035\005\036\006\037" +
    "\007\033\010\043\011\040\030\032\043\034\046\031\066" +
    "\041\001\002\000\042\023\uffee\045\051\046\044\051\063" +
    "\052\055\053\056\054\052\055\053\056\062\057\054\060" +
    "\050\061\057\062\047\063\060\064\061\065\045\001\002" +
    "\000\004\002\001\001\002\000\024\002\ufffb\003\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\025\ufffb\032\ufffb\033\ufffb\035\ufffb" +
    "\001\002\000\042\034\164\045\051\046\044\051\063\052" +
    "\055\053\056\054\052\055\053\056\062\057\054\060\050" +
    "\061\057\062\047\063\060\064\061\065\045\001\002\000" +
    "\030\004\035\005\036\006\037\007\033\010\043\011\040" +
    "\015\165\030\032\043\034\046\031\066\041\001\002\000" +
    "\004\050\200\001\002\000\032\004\035\005\036\006\037" +
    "\007\033\010\043\011\040\015\165\030\032\035\176\043" +
    "\034\046\031\066\041\001\002\000\032\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\015\uffe2\030\uffe2\035" +
    "\uffe2\043\uffe2\046\uffe2\066\uffe2\001\002\000\042\045\051" +
    "\046\044\050\171\051\063\052\055\053\056\054\052\055" +
    "\053\056\062\057\054\060\050\061\057\062\047\063\060" +
    "\064\061\065\045\001\002\000\004\061\172\001\002\000" +
    "\004\034\173\001\002\000\020\003\017\011\014\012\012" +
    "\014\005\025\021\032\024\033\023\001\002\000\022\003" +
    "\017\011\014\012\012\014\005\025\021\032\024\033\023" +
    "\035\175\001\002\000\032\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\015\uffe5\030\uffe5\035\uffe5\043\uffe5" +
    "\046\uffe5\066\uffe5\001\002\000\024\002\uffe1\003\uffe1\011" +
    "\uffe1\012\uffe1\014\uffe1\025\uffe1\032\uffe1\033\uffe1\035\uffe1" +
    "\001\002\000\032\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\015\uffe3\030\uffe3\035\uffe3\043\uffe3\046\uffe3" +
    "\066\uffe3\001\002\000\004\061\201\001\002\000\004\034" +
    "\202\001\002\000\020\003\017\011\014\012\012\014\005" +
    "\025\021\032\024\033\023\001\002\000\022\003\017\011" +
    "\014\012\012\014\005\025\021\032\024\033\023\035\204" +
    "\001\002\000\032\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\015\uffe4\030\uffe4\035\uffe4\043\uffe4\046\uffe4" +
    "\066\uffe4\001\002\000\024\002\ufffa\003\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\025\ufffa\032\ufffa\033\ufffa\035\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\026\002\006\003\015\005\014\006\017\007" +
    "\021\010\005\011\003\012\010\013\012\017\007\001\001" +
    "\000\002\001\001\000\004\015\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\126\001" +
    "\001\000\002\001\001\000\022\005\122\006\017\007\021" +
    "\010\005\011\003\012\010\013\012\017\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\041" +
    "\001\001\000\004\015\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\101\001\001\000\004\015\100\001\001\000" +
    "\002\001\001\000\004\015\077\001\001\000\004\015\076" +
    "\001\001\000\004\015\075\001\001\000\004\015\074\001" +
    "\001\000\004\015\073\001\001\000\004\015\072\001\001" +
    "\000\004\015\071\001\001\000\004\015\070\001\001\000" +
    "\004\015\067\001\001\000\004\015\066\001\001\000\004" +
    "\015\065\001\001\000\004\015\064\001\001\000\004\015" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\106\001\001\000\002\001\001\000\004\016\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\136\005\014\006\017\007\021\010\005\011\003\012\010" +
    "\013\012\017\007\001\001\000\022\005\122\006\017\007" +
    "\021\010\005\011\003\012\010\013\012\017\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\151\005" +
    "\014\006\017\007\021\010\005\011\003\012\010\013\012" +
    "\017\007\001\001\000\002\001\001\000\004\015\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\147" +
    "\005\014\006\017\007\021\010\005\011\003\012\010\013" +
    "\012\017\007\001\001\000\022\005\122\006\017\007\021" +
    "\010\005\011\003\012\010\013\012\017\007\001\001\000" +
    "\002\001\001\000\022\005\122\006\017\007\021\010\005" +
    "\011\003\012\010\013\012\017\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\155\001\001\000\002" +
    "\001\001\000\004\015\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\165\014\166\015\167\001\001\000\002\001\001\000" +
    "\006\014\176\015\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\173\005\014\006\017\007\021\010\005\011\003\012\010" +
    "\013\012\017\007\001\001\000\022\005\122\006\017\007" +
    "\021\010\005\011\003\012\010\013\012\017\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\202\005\014" +
    "\006\017\007\021\010\005\011\003\012\010\013\012\017" +
    "\007\001\001\000\022\005\122\006\017\007\021\010\005" +
    "\011\003\012\010\013\012\017\007\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    Lexer lex;
    Parser(Lexer lex){this.lex = lex;}

    public LinkedList<CompError> sintacticErrors = new LinkedList<>();

    public void syntax_error(Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICR, 
            "Component did not expected " + s.value,
            s.left,
            s.right
        ));
    }

    public void unrecovered_syntax_error (Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICU, 
            "Component did not expected " + s.value,
            s.left,
            s.right
        ));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCTIONS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= PRINT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLARATION END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= ASSIGNMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= INCREMENT_DECREMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= MATCH_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= error END 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PRINT ::= CONSOLE DOT LOG PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MUTABILITY ::= CONST 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MUTABILITY ::= LET 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE_RW ::= INT_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.WHOLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE_RW ::= DOUBLE_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE_RW ::= BOOL_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE_RW ::= CHAR_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE_RW ::= STRING_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASSIGNMENT ::= ID EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COUNTER ::= PLUS PLUS 
            {
              String RESULT =null;
		 RESULT = "plus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COUNTER ::= MINUS MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INCREMENT_DECREMENT ::= ID COUNTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementDecrement(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENT_DECREMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASE ::= EXPRESSION EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE ::= DEFAULT EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Default(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASES ::= CASES CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASES ::= CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MATCH_SENTENCE ::= MATCH EXPRESSION BRA_START CASES BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESSION ::= MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitaryNegation(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Addition(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Substraction(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESSION ::= EXPRESSION MULTIPLICATION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplication(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESSION ::= EXPRESSION DIVISION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESSION ::= EXPRESSION POWER EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Power(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESSION ::= EXPRESSION ROOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Root(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESSION ::= EXPRESSION MODULO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESSION ::= EXPRESSION EQUALS_TO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESSION ::= EXPRESSION NOT_EQUAL EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESSION ::= EXPRESSION LESS_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESSION ::= EXPRESSION GREATER_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESSION ::= EXPRESSION LESS_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESSION ::= EXPRESSION GREATER_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSION ::= EXPRESSION AND EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESSION ::= EXPRESSION OR EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESSION ::= NOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESSION ::= WHOLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Integer.parseInt(a),new Type(dataType.WHOLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESSION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a, new Type(dataType.STRING), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESSION ::= DOUBLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(new Double(a),new Type(dataType.DOUBLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSION ::= BOOLEAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Boolean.parseBoolean(a), new Type(dataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a.charAt(0), new Type(dataType.CHAR), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESSION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Access(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESSION ::= CAST PAR_START EXPRESSION AS TYPE_RW PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cast(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSION ::= PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
