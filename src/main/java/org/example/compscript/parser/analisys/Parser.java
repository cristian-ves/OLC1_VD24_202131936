
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.compscript.parser.analisys;

import java_cup.runtime.*;
import java.util.LinkedList;
import org.example.compscript.parser.abstract_.Instruction;
import org.example.compscript.parser.symbol.*;
import org.example.compscript.parser.instructions.Print;
import org.example.compscript.parser.instructions.declarations.Declaration;
import org.example.compscript.parser.instructions.declarations.ArrayDeclaration;
import org.example.compscript.parser.instructions.declarations.Array2DDeclaration;
import org.example.compscript.parser.instructions.assignments.Assignment;
import org.example.compscript.parser.instructions.assignments.ArrAssignment;
import org.example.compscript.parser.instructions.assignments.Arr2DAssignment;
import org.example.compscript.parser.instructions.IncrementDecrement;
import org.example.compscript.parser.instructions.If;
import org.example.compscript.parser.instructions.match.Match;
import org.example.compscript.parser.instructions.match.Case;
import org.example.compscript.parser.instructions.match.Default;
import org.example.compscript.parser.instructions.loop.For;
import org.example.compscript.parser.instructions.loop.While;
import org.example.compscript.parser.instructions.loop.DoWhile;
import org.example.compscript.parser.instructions.loop.Break;
import org.example.compscript.parser.instructions.loop.Continue;
import org.example.compscript.parser.instructions.lists.ListDeclaration;
import org.example.compscript.parser.instructions.lists.Push;
import org.example.compscript.parser.instructions.lists.Get;
import org.example.compscript.parser.instructions.lists.Set;
import org.example.compscript.parser.instructions.lists.Remove;
import org.example.compscript.parser.instructions.lists.Pop;
import org.example.compscript.parser.instructions.lists.Reverse;
import org.example.compscript.parser.instructions.structs.StructDeclaration;
import org.example.compscript.parser.instructions.structs.StructTypeIns;
import org.example.compscript.parser.expresions.Native;
import org.example.compscript.parser.expresions.operators.relational.*;
import org.example.compscript.parser.expresions.operators.arithmetic.*;
import org.example.compscript.parser.expresions.operators.logic.*;
import org.example.compscript.parser.exceptions.*;
import org.example.compscript.parser.expresions.cast.Cast;
import org.example.compscript.parser.expresions.variables.Access;
import org.example.compscript.parser.expresions.variables.ArrAccess;
import org.example.compscript.parser.expresions.variables.Arr2DAccess;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\003" +
    "\000\002\020\007\000\002\006\007\000\002\006\006\000" +
    "\002\027\010\000\002\027\012\000\002\027\010\000\002" +
    "\027\007\000\002\027\007\000\002\011\010\000\002\032" +
    "\003\000\002\032\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\005\005\000\002\005\003\000\002\007\007\000\002" +
    "\007\005\000\002\012\010\000\002\012\006\000\002\012" +
    "\011\000\002\012\014\000\002\012\016\000\002\013\005" +
    "\000\002\013\010\000\002\013\013\000\002\033\004\000" +
    "\002\033\004\000\002\014\004\000\002\015\011\000\002" +
    "\015\013\000\002\015\015\000\002\017\010\000\002\017" +
    "\010\000\002\004\004\000\002\004\003\000\002\016\007" +
    "\000\002\021\015\000\002\022\003\000\002\022\003\000" +
    "\002\023\011\000\002\024\012\000\002\025\003\000\002" +
    "\026\003\000\002\030\004\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\004\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\010\000\002\030\006\000\002" +
    "\030\011\000\002\030\010\000\002\030\010\000\002\030" +
    "\007\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\034\003\026\011\016\012\015\014\037\016" +
    "\011\017\036\020\020\021\024\022\005\025\014\032\027" +
    "\033\031\055\007\001\002\000\004\023\u0103\001\002\000" +
    "\004\023\uffc1\001\002\000\040\002\ufff6\003\ufff6\011\ufff6" +
    "\012\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\025\ufff6\032\ufff6\033\ufff6\035\ufff6\055\ufff6\001\002" +
    "\000\004\011\367\001\002\000\040\002\ufff9\003\ufff9\011" +
    "\ufff9\012\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\025\ufff9\032\ufff9\033\ufff9\035\ufff9\055\ufff9\001" +
    "\002\000\004\056\361\001\002\000\004\023\360\001\002" +
    "\000\004\002\357\001\002\000\004\026\352\001\002\000" +
    "\004\056\337\001\002\000\014\026\312\036\255\060\254" +
    "\061\256\063\253\001\002\000\004\023\311\001\002\000" +
    "\004\034\302\001\002\000\036\002\000\003\026\011\016" +
    "\012\015\014\037\016\011\017\036\020\020\021\024\022" +
    "\005\025\014\032\027\033\031\055\007\001\002\000\040" +
    "\002\ufffe\003\ufffe\011\ufffe\012\ufffe\014\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\025\ufffe\032\ufffe\033\ufffe" +
    "\035\ufffe\055\ufffe\001\002\000\040\002\ufff8\003\ufff8\011" +
    "\ufff8\012\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\025\ufff8\032\ufff8\033\ufff8\035\ufff8\055\ufff8\001" +
    "\002\000\004\023\uffc2\001\002\000\004\023\301\001\002" +
    "\000\042\002\uffef\003\uffef\011\uffef\012\uffef\014\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\300\025\uffef" +
    "\032\uffef\033\uffef\035\uffef\055\uffef\001\002\000\004\011" +
    "\uffe5\001\002\000\004\023\277\001\002\000\004\011\uffe4" +
    "\001\002\000\040\002\ufff7\003\ufff7\011\ufff7\012\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\025\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\055\ufff7\001\002\000\004\023" +
    "\276\001\002\000\004\023\275\001\002\000\004\023\274" +
    "\001\002\000\004\056\235\001\002\000\026\004\075\005" +
    "\076\006\077\007\074\010\103\011\100\030\072\056\073" +
    "\061\071\101\101\001\002\000\004\023\211\001\002\000" +
    "\004\011\042\001\002\000\004\024\043\001\002\000\016" +
    "\041\047\042\052\043\046\044\050\045\045\046\044\001" +
    "\002\000\004\073\206\001\002\000\014\023\uffdf\036\uffdf" +
    "\057\uffdf\063\uffdf\074\uffdf\001\002\000\014\023\uffe0\036" +
    "\uffe0\057\uffe0\063\uffe0\074\uffe0\001\002\000\014\023\uffe3" +
    "\036\uffe3\057\uffe3\063\uffe3\074\uffe3\001\002\000\014\023" +
    "\uffe1\036\uffe1\057\uffe1\063\uffe1\074\uffe1\001\002\000\010" +
    "\023\uffd9\036\054\063\053\001\002\000\014\023\uffe2\036" +
    "\uffe2\057\uffe2\063\uffe2\074\uffe2\001\002\000\026\004\075" +
    "\005\076\006\077\007\074\010\103\011\100\030\072\056" +
    "\073\061\071\101\101\001\002\000\004\037\055\001\002" +
    "\000\006\036\057\063\056\001\002\000\004\036\202\001" +
    "\002\000\004\037\060\001\002\000\004\063\061\001\002" +
    "\000\004\036\062\001\002\000\004\036\063\001\002\000" +
    "\026\004\075\005\076\006\077\007\074\010\103\011\100" +
    "\030\072\056\073\061\071\101\101\001\002\000\006\037" +
    "\066\040\065\001\002\000\004\036\067\001\002\000\004" +
    "\023\uffd6\001\002\000\026\004\075\005\076\006\077\007" +
    "\074\010\103\011\100\030\072\056\073\061\071\101\101" +
    "\001\002\000\006\037\176\040\175\001\002\000\026\004" +
    "\075\005\076\006\077\007\074\010\103\011\100\030\072" +
    "\056\073\061\071\101\101\001\002\000\004\056\167\001" +
    "\002\000\026\004\075\005\076\006\077\007\074\010\103" +
    "\011\100\030\072\056\073\061\071\101\101\001\002\000" +
    "\056\023\uffac\031\uffac\034\uffac\037\uffac\040\uffac\057\uffac" +
    "\060\uffac\061\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\077\uffac\100\uffac\001\002\000\056\023\uffaf\031" +
    "\uffaf\034\uffaf\037\uffaf\040\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\100\uffaf\001\002\000\056\023\uffae\031\uffae\034\uffae\037" +
    "\uffae\040\uffae\057\uffae\060\uffae\061\uffae\063\uffae\064\uffae" +
    "\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073" +
    "\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\001\002" +
    "\000\056\023\uffad\031\uffad\034\uffad\037\uffad\040\uffad\057" +
    "\uffad\060\uffad\061\uffad\063\uffad\064\uffad\065\uffad\066\uffad" +
    "\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\076\uffad\077\uffad\100\uffad\001\002\000\062\023\uffaa" +
    "\026\144\031\uffaa\034\uffaa\036\143\037\uffaa\040\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075" +
    "\uffaa\076\uffaa\077\uffaa\100\uffaa\001\002\000\026\004\075" +
    "\005\076\006\077\007\074\010\103\011\100\030\072\056" +
    "\073\061\071\101\101\001\002\000\044\037\uffdd\040\uffdd" +
    "\060\110\061\104\064\121\065\114\066\115\067\111\070" +
    "\112\071\122\072\113\073\107\074\116\075\106\076\117" +
    "\077\120\100\105\001\002\000\056\023\uffab\031\uffab\034" +
    "\uffab\037\uffab\040\uffab\057\uffab\060\uffab\061\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab" +
    "\001\002\000\026\004\075\005\076\006\077\007\074\010" +
    "\103\011\100\030\072\056\073\061\071\101\101\001\002" +
    "\000\026\004\075\005\076\006\077\007\074\010\103\011" +
    "\100\030\072\056\073\061\071\101\101\001\002\000\026" +
    "\004\075\005\076\006\077\007\074\010\103\011\100\030" +
    "\072\056\073\061\071\101\101\001\002\000\026\004\075" +
    "\005\076\006\077\007\074\010\103\011\100\030\072\056" +
    "\073\061\071\101\101\001\002\000\026\004\075\005\076" +
    "\006\077\007\074\010\103\011\100\030\072\056\073\061" +
    "\071\101\101\001\002\000\026\004\075\005\076\006\077" +
    "\007\074\010\103\011\100\030\072\056\073\061\071\101" +
    "\101\001\002\000\026\004\075\005\076\006\077\007\074" +
    "\010\103\011\100\030\072\056\073\061\071\101\101\001" +
    "\002\000\026\004\075\005\076\006\077\007\074\010\103" +
    "\011\100\030\072\056\073\061\071\101\101\001\002\000" +
    "\026\004\075\005\076\006\077\007\074\010\103\011\100" +
    "\030\072\056\073\061\071\101\101\001\002\000\026\004" +
    "\075\005\076\006\077\007\074\010\103\011\100\030\072" +
    "\056\073\061\071\101\101\001\002\000\026\004\075\005" +
    "\076\006\077\007\074\010\103\011\100\030\072\056\073" +
    "\061\071\101\101\001\002\000\026\004\075\005\076\006" +
    "\077\007\074\010\103\011\100\030\072\056\073\061\071" +
    "\101\101\001\002\000\026\004\075\005\076\006\077\007" +
    "\074\010\103\011\100\030\072\056\073\061\071\101\101" +
    "\001\002\000\026\004\075\005\076\006\077\007\074\010" +
    "\103\011\100\030\072\056\073\061\071\101\101\001\002" +
    "\000\026\004\075\005\076\006\077\007\074\010\103\011" +
    "\100\030\072\056\073\061\071\101\101\001\002\000\056" +
    "\023\uffb8\031\uffb8\034\uffb8\037\uffb8\040\uffb8\057\uffb8\060" +
    "\110\061\104\063\uffb8\064\121\065\114\066\115\067\111" +
    "\070\112\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\001\002\000\056\023\uffbd\031\uffbd" +
    "\034\uffbd\037\uffbd\040\uffbd\057\uffbd\060\uffbd\061\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\115\067\111\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\001\002\000\056\023\uffb1\031\uffb1\034\uffb1\037\uffb1" +
    "\040\uffb1\057\uffb1\060\110\061\104\063\uffb1\064\121\065" +
    "\114\066\115\067\111\070\112\071\122\072\113\073\107" +
    "\074\116\075\106\076\117\077\uffb1\100\105\001\002\000" +
    "\056\023\uffb3\031\uffb3\034\uffb3\037\uffb3\040\uffb3\057\uffb3" +
    "\060\110\061\104\063\uffb3\064\121\065\114\066\115\067" +
    "\111\070\112\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\001\002\000\056\023\uffb5\031" +
    "\uffb5\034\uffb5\037\uffb5\040\uffb5\057\uffb5\060\110\061\104" +
    "\063\uffb5\064\121\065\114\066\115\067\111\070\112\071" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\001\002\000\052\023\uffbb\031\uffbb\034\uffbb\037" +
    "\uffbb\040\uffbb\057\uffbb\060\uffbb\061\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\001\002\000\056\023\uffbc" +
    "\031\uffbc\034\uffbc\037\uffbc\040\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\115\067\111\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077" +
    "\uffbc\100\uffbc\001\002\000\056\023\uffb7\031\uffb7\034\uffb7" +
    "\037\uffb7\040\uffb7\057\uffb7\060\110\061\104\063\uffb7\064" +
    "\121\065\114\066\115\067\111\070\112\071\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\001" +
    "\002\000\056\023\uffb9\031\uffb9\034\uffb9\037\uffb9\040\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\063\uffb9\064\uffb9\065\uffb9\066" +
    "\115\067\111\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\001\002\000\052\023" +
    "\uffba\031\uffba\034\uffba\037\uffba\040\uffba\057\uffba\060\uffba" +
    "\061\uffba\063\uffba\064\uffba\065\uffba\070\uffba\071\uffba\072" +
    "\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba" +
    "\001\002\000\056\023\uffbf\031\uffbf\034\uffbf\037\uffbf\040" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf\064\121\065\114" +
    "\066\115\067\111\070\112\071\uffbf\072\uffbf\073\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\001\002\000\056" +
    "\023\uffb6\031\uffb6\034\uffb6\037\uffb6\040\uffb6\057\uffb6\060" +
    "\110\061\104\063\uffb6\064\121\065\114\066\115\067\111" +
    "\070\112\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\001\002\000\056\023\uffb4\031\uffb4" +
    "\034\uffb4\037\uffb4\040\uffb4\057\uffb4\060\110\061\104\063" +
    "\uffb4\064\121\065\114\066\115\067\111\070\112\071\uffb4" +
    "\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100" +
    "\uffb4\001\002\000\056\023\uffb2\031\uffb2\034\uffb2\037\uffb2" +
    "\040\uffb2\057\uffb2\060\110\061\104\063\uffb2\064\121\065" +
    "\114\066\115\067\111\070\112\071\122\072\113\073\107" +
    "\074\116\075\106\076\117\077\uffb2\100\uffb2\001\002\000" +
    "\056\023\uffbe\031\uffbe\034\uffbe\037\uffbe\040\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\063\uffbe\064\121\065\114\066\115\067" +
    "\111\070\112\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\001\002\000\056\023\uffb0\031" +
    "\uffb0\034\uffb0\037\uffb0\040\uffb0\057\uffb0\060\110\061\104" +
    "\063\uffb0\064\121\065\114\066\115\067\111\070\112\071" +
    "\122\072\113\073\107\074\116\075\106\076\117\077\uffb0" +
    "\100\uffb0\001\002\000\026\004\075\005\076\006\077\007" +
    "\074\010\103\011\100\030\072\056\073\061\071\101\101" +
    "\001\002\000\010\050\145\052\147\053\146\001\002\000" +
    "\004\056\155\001\002\000\004\056\153\001\002\000\004" +
    "\056\150\001\002\000\026\004\075\005\076\006\077\007" +
    "\074\010\103\011\100\030\072\056\073\061\071\101\101" +
    "\001\002\000\042\057\152\060\110\061\104\064\121\065" +
    "\114\066\115\067\111\070\112\071\122\072\113\073\107" +
    "\074\116\075\106\076\117\077\120\100\105\001\002\000" +
    "\056\023\uffa5\031\uffa5\034\uffa5\037\uffa5\040\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067" +
    "\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5" +
    "\076\uffa5\077\uffa5\100\uffa5\001\002\000\004\057\154\001" +
    "\002\000\056\023\uffa4\031\uffa4\034\uffa4\037\uffa4\040\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4\065\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4" +
    "\075\uffa4\076\uffa4\077\uffa4\100\uffa4\001\002\000\026\004" +
    "\075\005\076\006\077\007\074\010\103\011\100\030\072" +
    "\056\073\061\071\101\101\001\002\000\042\057\157\060" +
    "\110\061\104\064\121\065\114\066\115\067\111\070\112" +
    "\071\122\072\113\073\107\074\116\075\106\076\117\077" +
    "\120\100\105\001\002\000\056\023\uffa6\031\uffa6\034\uffa6" +
    "\037\uffa6\040\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\001" +
    "\002\000\042\037\161\060\110\061\104\064\121\065\114" +
    "\066\115\067\111\070\112\071\122\072\113\073\107\074" +
    "\116\075\106\076\117\077\120\100\105\001\002\000\060" +
    "\023\uffa8\031\uffa8\034\uffa8\036\162\037\uffa8\040\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075" +
    "\uffa8\076\uffa8\077\uffa8\100\uffa8\001\002\000\026\004\075" +
    "\005\076\006\077\007\074\010\103\011\100\030\072\056" +
    "\073\061\071\101\101\001\002\000\042\037\164\060\110" +
    "\061\104\064\121\065\114\066\115\067\111\070\112\071" +
    "\122\072\113\073\107\074\116\075\106\076\117\077\120" +
    "\100\105\001\002\000\056\023\uffa7\031\uffa7\034\uffa7\037" +
    "\uffa7\040\uffa7\057\uffa7\060\uffa7\061\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\001\002" +
    "\000\042\057\166\060\110\061\104\064\121\065\114\066" +
    "\115\067\111\070\112\071\122\072\113\073\107\074\116" +
    "\075\106\076\117\077\120\100\105\001\002\000\056\023" +
    "\uffa3\031\uffa3\034\uffa3\037\uffa3\040\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\077\uffa3\100\uffa3\001\002\000\026\004\075\005\076\006" +
    "\077\007\074\010\103\011\100\030\072\056\073\061\071" +
    "\101\101\001\002\000\042\031\171\060\110\061\104\064" +
    "\121\065\114\066\115\067\111\070\112\071\122\072\113" +
    "\073\107\074\116\075\106\076\117\077\120\100\105\001" +
    "\002\000\014\041\047\042\052\043\046\044\050\045\045" +
    "\001\002\000\004\057\173\001\002\000\056\023\uffa9\031" +
    "\uffa9\034\uffa9\037\uffa9\040\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9" +
    "\100\uffa9\001\002\000\056\023\uffc0\031\uffc0\034\uffc0\037" +
    "\uffc0\040\uffc0\057\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\001\002" +
    "\000\026\004\075\005\076\006\077\007\074\010\103\011" +
    "\100\030\072\056\073\061\071\101\101\001\002\000\006" +
    "\037\uffdc\040\uffdc\001\002\000\044\037\uffde\040\uffde\060" +
    "\110\061\104\064\121\065\114\066\115\067\111\070\112" +
    "\071\122\072\113\073\107\074\116\075\106\076\117\077" +
    "\120\100\105\001\002\000\006\037\201\040\175\001\002" +
    "\000\006\037\uffdb\040\uffdb\001\002\000\026\004\075\005" +
    "\076\006\077\007\074\010\103\011\100\030\072\056\073" +
    "\061\071\101\101\001\002\000\006\037\204\040\175\001" +
    "\002\000\004\023\uffd7\001\002\000\042\023\uffda\060\110" +
    "\061\104\064\121\065\114\066\115\067\111\070\112\071" +
    "\122\072\113\073\107\074\116\075\106\076\117\077\120" +
    "\100\105\001\002\000\014\041\047\042\052\043\046\044" +
    "\050\045\045\001\002\000\004\074\210\001\002\000\004" +
    "\023\uffd8\001\002\000\040\002\ufff2\003\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\025\ufff2\032\ufff2\033\ufff2\035\ufff2\055\ufff2\001\002\000" +
    "\042\034\213\060\110\061\104\064\121\065\114\066\115" +
    "\067\111\070\112\071\122\072\113\073\107\074\116\075" +
    "\106\076\117\077\120\100\105\001\002\000\030\004\075" +
    "\005\076\006\077\007\074\010\103\011\100\015\214\030" +
    "\072\056\073\061\071\101\101\001\002\000\004\063\230" +
    "\001\002\000\032\004\075\005\076\006\077\007\074\010" +
    "\103\011\100\015\214\030\072\035\226\056\073\061\071" +
    "\101\101\001\002\000\032\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\015\uffc9\030\uffc9\035\uffc9\056\uffc9" +
    "\061\uffc9\101\uffc9\001\002\000\042\060\110\061\104\063" +
    "\220\064\121\065\114\066\115\067\111\070\112\071\122" +
    "\072\113\073\107\074\116\075\106\076\117\077\120\100" +
    "\105\001\002\000\004\074\221\001\002\000\004\034\222" +
    "\001\002\000\034\003\026\011\016\012\015\014\037\016" +
    "\011\017\036\020\020\021\024\022\005\025\014\032\027" +
    "\033\031\055\007\001\002\000\036\003\026\011\016\012" +
    "\015\014\037\016\011\017\036\020\020\021\024\022\005" +
    "\025\014\032\027\033\031\035\225\055\007\001\002\000" +
    "\040\002\uffff\003\uffff\011\uffff\012\uffff\014\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\025\uffff\032\uffff\033" +
    "\uffff\035\uffff\055\uffff\001\002\000\032\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\015\uffcc\030\uffcc\035" +
    "\uffcc\056\uffcc\061\uffcc\101\uffcc\001\002\000\040\002\uffc8" +
    "\003\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\025\uffc8\032\uffc8\033\uffc8\035\uffc8" +
    "\055\uffc8\001\002\000\032\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\015\uffca\030\uffca\035\uffca\056\uffca" +
    "\061\uffca\101\uffca\001\002\000\004\074\231\001\002\000" +
    "\004\034\232\001\002\000\034\003\026\011\016\012\015" +
    "\014\037\016\011\017\036\020\020\021\024\022\005\025" +
    "\014\032\027\033\031\055\007\001\002\000\036\003\026" +
    "\011\016\012\015\014\037\016\011\017\036\020\020\021" +
    "\024\022\005\025\014\032\027\033\031\035\234\055\007" +
    "\001\002\000\032\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\015\uffcb\030\uffcb\035\uffcb\056\uffcb\061\uffcb" +
    "\101\uffcb\001\002\000\004\011\236\001\002\000\006\036" +
    "\255\063\253\001\002\000\004\023\240\001\002\000\026" +
    "\004\075\005\076\006\077\007\074\010\103\011\100\030" +
    "\072\056\073\061\071\101\101\001\002\000\042\023\242" +
    "\060\110\061\104\064\121\065\114\066\115\067\111\070" +
    "\112\071\122\072\113\073\107\074\116\075\106\076\117" +
    "\077\120\100\105\001\002\000\004\011\243\001\002\000" +
    "\012\036\255\060\254\061\256\063\253\001\002\000\004" +
    "\057\uffc6\001\002\000\004\057\uffc5\001\002\000\004\057" +
    "\247\001\002\000\004\034\250\001\002\000\034\003\026" +
    "\011\016\012\015\014\037\016\011\017\036\020\020\021" +
    "\024\022\005\025\014\032\027\033\031\055\007\001\002" +
    "\000\036\003\026\011\016\012\015\014\037\016\011\017" +
    "\036\020\020\021\024\022\005\025\014\032\027\033\031" +
    "\035\252\055\007\001\002\000\040\002\uffc7\003\uffc7\011" +
    "\uffc7\012\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\025\uffc7\032\uffc7\033\uffc7\035\uffc7\055\uffc7\001" +
    "\002\000\026\004\075\005\076\006\077\007\074\010\103" +
    "\011\100\030\072\056\073\061\071\101\101\001\002\000" +
    "\004\060\272\001\002\000\026\004\075\005\076\006\077" +
    "\007\074\010\103\011\100\030\072\056\073\061\071\101" +
    "\101\001\002\000\004\061\260\001\002\000\006\023\uffd0" +
    "\057\uffd0\001\002\000\006\023\uffd1\057\uffd1\001\002\000" +
    "\042\037\262\060\110\061\104\064\121\065\114\066\115" +
    "\067\111\070\112\071\122\072\113\073\107\074\116\075" +
    "\106\076\117\077\120\100\105\001\002\000\006\036\264" +
    "\063\263\001\002\000\026\004\075\005\076\006\077\007" +
    "\074\010\103\011\100\030\072\056\073\061\071\101\101" +
    "\001\002\000\026\004\075\005\076\006\077\007\074\010" +
    "\103\011\100\030\072\056\073\061\071\101\101\001\002" +
    "\000\042\037\266\060\110\061\104\064\121\065\114\066" +
    "\115\067\111\070\112\071\122\072\113\073\107\074\116" +
    "\075\106\076\117\077\120\100\105\001\002\000\004\063" +
    "\267\001\002\000\026\004\075\005\076\006\077\007\074" +
    "\010\103\011\100\030\072\056\073\061\071\101\101\001" +
    "\002\000\044\023\uffd3\057\uffd3\060\110\061\104\064\121" +
    "\065\114\066\115\067\111\070\112\071\122\072\113\073" +
    "\107\074\116\075\106\076\117\077\120\100\105\001\002" +
    "\000\044\023\uffd4\057\uffd4\060\110\061\104\064\121\065" +
    "\114\066\115\067\111\070\112\071\122\072\113\073\107" +
    "\074\116\075\106\076\117\077\120\100\105\001\002\000" +
    "\006\023\uffd2\057\uffd2\001\002\000\044\023\uffd5\057\uffd5" +
    "\060\110\061\104\064\121\065\114\066\115\067\111\070" +
    "\112\071\122\072\113\073\107\074\116\075\106\076\117" +
    "\077\120\100\105\001\002\000\040\002\ufffb\003\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\025\ufffb\032\ufffb\033\ufffb\035\ufffb\055\ufffb\001" +
    "\002\000\040\002\ufff5\003\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\025\ufff5\032" +
    "\ufff5\033\ufff5\035\ufff5\055\ufff5\001\002\000\040\002\ufffc" +
    "\003\ufffc\011\ufffc\012\ufffc\014\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\025\ufffc\032\ufffc\033\ufffc\035\ufffc" +
    "\055\ufffc\001\002\000\040\002\ufffa\003\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\025\ufffa\032\ufffa\033\ufffa\035\ufffa\055\ufffa\001\002\000" +
    "\040\002\ufff0\003\ufff0\011\ufff0\012\ufff0\014\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0\032\ufff0\033" +
    "\ufff0\035\ufff0\055\ufff0\001\002\000\040\002\ufffd\003\ufffd" +
    "\011\ufffd\012\ufffd\014\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\025\ufffd\032\ufffd\033\ufffd\035\ufffd\055\ufffd" +
    "\001\002\000\034\003\026\011\016\012\015\014\037\016" +
    "\011\017\036\020\020\021\024\022\005\025\014\032\027" +
    "\033\031\055\007\001\002\000\036\003\026\011\016\012" +
    "\015\014\037\016\011\017\036\020\020\021\024\022\005" +
    "\025\014\032\027\033\031\035\304\055\007\001\002\000" +
    "\004\016\305\001\002\000\004\056\306\001\002\000\026" +
    "\004\075\005\076\006\077\007\074\010\103\011\100\030" +
    "\072\056\073\061\071\101\101\001\002\000\042\057\310" +
    "\060\110\061\104\064\121\065\114\066\115\067\111\070" +
    "\112\071\122\072\113\073\107\074\116\075\106\076\117" +
    "\077\120\100\105\001\002\000\004\023\uffc3\001\002\000" +
    "\040\002\ufff1\003\ufff1\011\ufff1\012\ufff1\014\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\025\ufff1\032\ufff1\033" +
    "\ufff1\035\ufff1\055\ufff1\001\002\000\014\047\314\051\313" +
    "\052\317\053\316\054\315\001\002\000\004\056\332\001" +
    "\002\000\004\056\327\001\002\000\004\056\325\001\002" +
    "\000\004\056\323\001\002\000\004\056\320\001\002\000" +
    "\026\004\075\005\076\006\077\007\074\010\103\011\100" +
    "\030\072\056\073\061\071\101\101\001\002\000\042\057" +
    "\322\060\110\061\104\064\121\065\114\066\115\067\111" +
    "\070\112\071\122\072\113\073\107\074\116\075\106\076" +
    "\117\077\120\100\105\001\002\000\004\023\uffe9\001\002" +
    "\000\004\057\324\001\002\000\004\023\uffe8\001\002\000" +
    "\004\057\326\001\002\000\004\023\uffe7\001\002\000\026" +
    "\004\075\005\076\006\077\007\074\010\103\011\100\030" +
    "\072\056\073\061\071\101\101\001\002\000\042\057\331" +
    "\060\110\061\104\064\121\065\114\066\115\067\111\070" +
    "\112\071\122\072\113\073\107\074\116\075\106\076\117" +
    "\077\120\100\105\001\002\000\004\023\uffeb\001\002\000" +
    "\026\004\075\005\076\006\077\007\074\010\103\011\100" +
    "\030\072\056\073\061\071\101\101\001\002\000\042\040" +
    "\334\060\110\061\104\064\121\065\114\066\115\067\111" +
    "\070\112\071\122\072\113\073\107\074\116\075\106\076" +
    "\117\077\120\100\105\001\002\000\026\004\075\005\076" +
    "\006\077\007\074\010\103\011\100\030\072\056\073\061" +
    "\071\101\101\001\002\000\042\057\336\060\110\061\104" +
    "\064\121\065\114\066\115\067\111\070\112\071\122\072" +
    "\113\073\107\074\116\075\106\076\117\077\120\100\105" +
    "\001\002\000\004\023\uffea\001\002\000\026\004\075\005" +
    "\076\006\077\007\074\010\103\011\100\030\072\056\073" +
    "\061\071\101\101\001\002\000\042\057\341\060\110\061" +
    "\104\064\121\065\114\066\115\067\111\070\112\071\122" +
    "\072\113\073\107\074\116\075\106\076\117\077\120\100" +
    "\105\001\002\000\004\034\342\001\002\000\034\003\026" +
    "\011\016\012\015\014\037\016\011\017\036\020\020\021" +
    "\024\022\005\025\014\032\027\033\031\055\007\001\002" +
    "\000\036\003\026\011\016\012\015\014\037\016\011\017" +
    "\036\020\020\021\024\022\005\025\014\032\027\033\031" +
    "\035\344\055\007\001\002\000\042\002\uffcf\003\uffcf\011" +
    "\uffcf\012\uffcf\013\345\014\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\025\uffcf\032\uffcf\033\uffcf\035\uffcf\055" +
    "\uffcf\001\002\000\006\012\015\034\346\001\002\000\034" +
    "\003\026\011\016\012\015\014\037\016\011\017\036\020" +
    "\020\021\024\022\005\025\014\032\027\033\031\055\007" +
    "\001\002\000\040\002\uffce\003\uffce\011\uffce\012\uffce\014" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\025\uffce" +
    "\032\uffce\033\uffce\035\uffce\055\uffce\001\002\000\036\003" +
    "\026\011\016\012\015\014\037\016\011\017\036\020\020" +
    "\021\024\022\005\025\014\032\027\033\031\035\351\055" +
    "\007\001\002\000\040\002\uffcd\003\uffcd\011\uffcd\012\uffcd" +
    "\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\025" +
    "\uffcd\032\uffcd\033\uffcd\035\uffcd\055\uffcd\001\002\000\004" +
    "\027\353\001\002\000\004\056\354\001\002\000\026\004" +
    "\075\005\076\006\077\007\074\010\103\011\100\030\072" +
    "\056\073\061\071\101\101\001\002\000\042\057\356\060" +
    "\110\061\104\064\121\065\114\066\115\067\111\070\112" +
    "\071\122\072\113\073\107\074\116\075\106\076\117\077" +
    "\120\100\105\001\002\000\004\023\uffe6\001\002\000\004" +
    "\002\001\001\002\000\040\002\ufff3\003\ufff3\011\ufff3\012" +
    "\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\025\ufff3\032\ufff3\033\ufff3\035\ufff3\055\ufff3\001\002\000" +
    "\026\004\075\005\076\006\077\007\074\010\103\011\100" +
    "\030\072\056\073\061\071\101\101\001\002\000\042\057" +
    "\363\060\110\061\104\064\121\065\114\066\115\067\111" +
    "\070\112\071\122\072\113\073\107\074\116\075\106\076" +
    "\117\077\120\100\105\001\002\000\004\034\364\001\002" +
    "\000\034\003\026\011\016\012\015\014\037\016\011\017" +
    "\036\020\020\021\024\022\005\025\014\032\027\033\031" +
    "\055\007\001\002\000\036\003\026\011\016\012\015\014" +
    "\037\016\011\017\036\020\020\021\024\022\005\025\014" +
    "\032\027\033\031\035\366\055\007\001\002\000\040\002" +
    "\uffc4\003\uffc4\011\uffc4\012\uffc4\014\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\025\uffc4\032\uffc4\033\uffc4\035" +
    "\uffc4\055\uffc4\001\002\000\004\034\370\001\002\000\004" +
    "\011\371\001\002\000\004\024\u0100\001\002\000\006\011" +
    "\374\035\373\001\002\000\004\023\uffee\001\002\000\004" +
    "\024\375\001\002\000\014\041\047\042\052\043\046\044" +
    "\050\045\045\001\002\000\004\023\377\001\002\000\006" +
    "\011\uffed\035\uffed\001\002\000\014\041\047\042\052\043" +
    "\046\044\050\045\045\001\002\000\004\023\u0102\001\002" +
    "\000\006\011\uffec\035\uffec\001\002\000\040\002\ufff4\003" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\025\ufff4\032\ufff4\033\ufff4\035\ufff4\055" +
    "\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\044\002\012\003\020\010\021\011\024\012" +
    "\032\013\034\014\027\015\007\016\022\020\016\021\031" +
    "\023\005\024\033\025\003\026\011\027\037\032\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\010\223\011\024\012\032\013\034" +
    "\014\027\015\007\016\022\020\016\021\031\023\005\024" +
    "\033\025\003\026\011\027\037\032\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\063\001\001\000\006\005\177\030" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\067\030\101\001\001\000\002\001" +
    "\001\000\004\030\173\001\001\000\002\001\001\000\004" +
    "\030\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\140\001\001\000\004\030\137\001\001\000\004" +
    "\030\136\001\001\000\004\030\135\001\001\000\004\030" +
    "\134\001\001\000\004\030\133\001\001\000\004\030\132" +
    "\001\001\000\004\030\131\001\001\000\004\030\130\001" +
    "\001\000\004\030\127\001\001\000\004\030\126\001\001" +
    "\000\004\030\125\001\001\000\004\030\124\001\001\000" +
    "\004\030\123\001\001\000\004\030\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\167\001\001" +
    "\000\002\001\001\000\004\031\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\202\030\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\214\017" +
    "\215\030\216\001\001\000\002\001\001\000\006\017\226" +
    "\030\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\222\010\021" +
    "\011\024\012\032\013\034\014\027\015\007\016\022\020" +
    "\016\021\031\023\005\024\033\025\003\026\011\027\037" +
    "\032\040\001\001\000\040\010\223\011\024\012\032\013" +
    "\034\014\027\015\007\016\022\020\016\021\031\023\005" +
    "\024\033\025\003\026\011\027\037\032\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\232\010\021\011\024\012\032\013\034\014\027\015\007" +
    "\016\022\020\016\021\031\023\005\024\033\025\003\026" +
    "\011\027\037\032\040\001\001\000\040\010\223\011\024" +
    "\012\032\013\034\014\027\015\007\016\022\020\016\021" +
    "\031\023\005\024\033\025\003\026\011\027\037\032\040" +
    "\001\001\000\002\001\001\000\004\013\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\240\001\001" +
    "\000\002\001\001\000\010\013\243\014\244\022\245\001" +
    "\001\000\004\033\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\250\010\021\011\024\012\032\013\034\014\027\015\007" +
    "\016\022\020\016\021\031\023\005\024\033\025\003\026" +
    "\011\027\037\032\040\001\001\000\040\010\223\011\024" +
    "\012\032\013\034\014\027\015\007\016\022\020\016\021" +
    "\031\023\005\024\033\025\003\026\011\027\037\032\040" +
    "\001\001\000\002\001\001\000\004\030\272\001\001\000" +
    "\002\001\001\000\004\030\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\270\001\001\000\004\030\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\302\010\021\011\024\012" +
    "\032\013\034\014\027\015\007\016\022\020\016\021\031" +
    "\023\005\024\033\025\003\026\011\027\037\032\040\001" +
    "\001\000\040\010\223\011\024\012\032\013\034\014\027" +
    "\015\007\016\022\020\016\021\031\023\005\024\033\025" +
    "\003\026\011\027\037\032\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\332\001\001\000\002\001\001\000\004\030\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\342\010\021\011\024\012\032\013\034\014\027\015" +
    "\007\016\022\020\016\021\031\023\005\024\033\025\003" +
    "\026\011\027\037\032\040\001\001\000\040\010\223\011" +
    "\024\012\032\013\034\014\027\015\007\016\022\020\016" +
    "\021\031\023\005\024\033\025\003\026\011\027\037\032" +
    "\040\001\001\000\002\001\001\000\004\015\346\001\001" +
    "\000\042\003\347\010\021\011\024\012\032\013\034\014" +
    "\027\015\007\016\022\020\016\021\031\023\005\024\033" +
    "\025\003\026\011\027\037\032\040\001\001\000\002\001" +
    "\001\000\040\010\223\011\024\012\032\013\034\014\027" +
    "\015\007\016\022\020\016\021\031\023\005\024\033\025" +
    "\003\026\011\027\037\032\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\364\010\021\011\024" +
    "\012\032\013\034\014\027\015\007\016\022\020\016\021" +
    "\031\023\005\024\033\025\003\026\011\027\037\032\040" +
    "\001\001\000\040\010\223\011\024\012\032\013\034\014" +
    "\027\015\007\016\022\020\016\021\031\023\005\024\033" +
    "\025\003\026\011\027\037\032\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    Lexer lex;
    Parser(Lexer lex){this.lex = lex;}

    public LinkedList<CompError> sintacticErrors = new LinkedList<>();

    public void syntax_error(Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICR, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }

    public void unrecovered_syntax_error (Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICU, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCTIONS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= PRINT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLARATION END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= ASSIGNMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= INCREMENT_DECREMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= MATCH_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOP_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOP_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOP_DO END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= BREAKS END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= CONTINUES END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= LIST_INST END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= STRUCT_INST END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= error END 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= error 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCT_INST ::= STRUCT ID BRA_START STRUCT_LIST BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructDeclaration(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_INST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_LIST ::= STRUCT_LIST ID COLON TYPE_RW END 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(new StructTypeIns(b, c, bleft, bright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STRUCT_LIST ::= ID COLON TYPE_RW END 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new StructTypeIns(a, b, aleft, aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_INST ::= ID DOT PUSH PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Push(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_INST ::= ID DOT SET PAR_START EXPRESSION COMMA EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Set(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LIST_INST ::= ID DOT REMOVE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LIST_INST ::= ID DOT POP PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Pop(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIST_INST ::= ID DOT REVERSE PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Reverse(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PRINT ::= CONSOLE DOT LOG PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MUTABILITY ::= CONST 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILITY ::= LET 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPE_RW ::= INT_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.WHOLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPE_RW ::= DOUBLE_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPE_RW ::= BOOL_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPE_RW ::= CHAR_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPE_RW ::= STRING_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRAY_DATA ::= ARRAY_DATA COMMA EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARRAY_DATA ::= EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARRAY2D_DATA ::= ARRAY2D_DATA COMMA SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARRAY2D_DATA ::= SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruction>>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARATION ::= MUTABILITY ID COLON LIST LESS_THAN TYPE_RW GREATER_THAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ListDeclaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END EQUALS SBRA_START ARRAY_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END SBRA_START SBRA_END EQUALS SBRA_START ARRAY2D_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2DDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASSIGNMENT ::= ID EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrAssignment(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arr2DAssignment(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COUNTER ::= PLUS PLUS 
            {
              String RESULT =null;
		 RESULT = "plus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COUNTER ::= MINUS MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INCREMENT_DECREMENT ::= ID COUNTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementDecrement(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENT_DECREMENT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Instruction> elseif = new LinkedList<>(); elseif.add(c); RESULT = new If(a, b, elseif, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASE ::= EXPRESSION EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASE ::= DEFAULT EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Default(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASES ::= CASES CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASES ::= CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MATCH_SENTENCE ::= MATCH EXPRESSION BRA_START CASES BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOOP_FOR ::= FOR PAR_START ASSIGNMENT END EXPRESSION END STEP_FOR PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STEP_FOR ::= ASSIGNMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STEP_FOR ::= INCREMENT_DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOOP_WHILE ::= WHILE PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOOP_DO ::= DO BRA_START INSTRUCTIONS BRA_END WHILE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_DO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BREAKS ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAKS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTINUES ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESSION ::= MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitaryNegation(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Addition(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Substraction(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSION ::= EXPRESSION MULTIPLICATION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplication(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESSION ::= EXPRESSION DIVISION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSION ::= EXPRESSION POWER EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Power(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESSION ::= EXPRESSION ROOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Root(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESSION ::= EXPRESSION MODULO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESSION ::= EXPRESSION EQUALS_TO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESSION ::= EXPRESSION NOT_EQUAL EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESSION ::= EXPRESSION LESS_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESSION ::= EXPRESSION GREATER_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESSION ::= EXPRESSION LESS_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESSION ::= EXPRESSION GREATER_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESSION ::= EXPRESSION AND EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESSION ::= EXPRESSION OR EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESSION ::= NOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESSION ::= WHOLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Integer.parseInt(a),new Type(dataType.WHOLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESSION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a, new Type(dataType.STRING), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESSION ::= DOUBLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(new Double(a),new Type(dataType.DOUBLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESSION ::= BOOLEAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Boolean.parseBoolean(a), new Type(dataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESSION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a.charAt(0), new Type(dataType.CHAR), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESSION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Access(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESSION ::= CAST PAR_START EXPRESSION AS TYPE_RW PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cast(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrAccess(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Arr2DAccess(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESSION ::= ID DOT GET PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Get(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESSION ::= ID DOT REMOVE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESSION ::= ID DOT POP PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Pop(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESSION ::= PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
