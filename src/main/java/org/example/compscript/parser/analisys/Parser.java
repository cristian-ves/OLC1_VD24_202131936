
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.compscript.parser.analisys;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashMap;
import org.example.compscript.parser.abstract_.Instruction;
import org.example.compscript.parser.symbol.*;
import org.example.compscript.parser.instructions.Print;
import org.example.compscript.parser.instructions.declarations.Declaration;
import org.example.compscript.parser.instructions.declarations.ArrayDeclaration;
import org.example.compscript.parser.instructions.declarations.Array2DDeclaration;
import org.example.compscript.parser.instructions.assignments.Assignment;
import org.example.compscript.parser.instructions.assignments.ArrAssignment;
import org.example.compscript.parser.instructions.assignments.Arr2DAssignment;
import org.example.compscript.parser.instructions.IncrementDecrement;
import org.example.compscript.parser.instructions.If;
import org.example.compscript.parser.instructions.match.Match;
import org.example.compscript.parser.instructions.match.Case;
import org.example.compscript.parser.instructions.match.Default;
import org.example.compscript.parser.instructions.loop.For;
import org.example.compscript.parser.instructions.loop.While;
import org.example.compscript.parser.instructions.loop.DoWhile;
import org.example.compscript.parser.instructions.loop.Break;
import org.example.compscript.parser.instructions.loop.Continue;
import org.example.compscript.parser.instructions.lists.ListDeclaration;
import org.example.compscript.parser.instructions.lists.Push;
import org.example.compscript.parser.instructions.lists.Get;
import org.example.compscript.parser.instructions.lists.Set;
import org.example.compscript.parser.instructions.lists.Remove;
import org.example.compscript.parser.instructions.lists.Pop;
import org.example.compscript.parser.instructions.lists.Reverse;
import org.example.compscript.parser.instructions.structs.StructDeclaration;
import org.example.compscript.parser.instructions.structs.StructTypeIns;
import org.example.compscript.parser.instructions.structs.StructInstanceIns;
import org.example.compscript.parser.instructions.structs.StructValue;
import org.example.compscript.parser.instructions.structs.StructAccess;
import org.example.compscript.parser.instructions.structs.StructAssignment;
import org.example.compscript.parser.instructions.funcs.Method;
import org.example.compscript.parser.instructions.funcs.RunMain;
import org.example.compscript.parser.expresions.Native;
import org.example.compscript.parser.expresions.operators.relational.*;
import org.example.compscript.parser.expresions.operators.arithmetic.*;
import org.example.compscript.parser.expresions.operators.logic.*;
import org.example.compscript.parser.exceptions.*;
import org.example.compscript.parser.expresions.cast.Cast;
import org.example.compscript.parser.expresions.variables.Access;
import org.example.compscript.parser.expresions.variables.ArrAccess;
import org.example.compscript.parser.expresions.variables.Arr2DAccess;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\032\006\000" +
    "\002\032\007\000\002\037\007\000\002\037\005\000\002" +
    "\040\005\000\002\040\003\000\002\041\007\000\002\041" +
    "\005\000\002\021\007\000\002\006\007\000\002\006\006" +
    "\000\002\030\010\000\002\030\012\000\002\030\010\000" +
    "\002\030\007\000\002\030\007\000\002\012\010\000\002" +
    "\035\003\000\002\035\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\031\011\000\002\031\012\000" +
    "\002\005\005\000\002\005\003\000\002\010\007\000\002" +
    "\010\005\000\002\013\010\000\002\013\006\000\002\013" +
    "\011\000\002\013\014\000\002\013\016\000\002\013\012" +
    "\000\002\013\007\000\002\007\007\000\002\007\005\000" +
    "\002\014\005\000\002\014\010\000\002\014\013\000\002" +
    "\036\004\000\002\036\004\000\002\015\004\000\002\016" +
    "\011\000\002\016\013\000\002\016\015\000\002\020\010" +
    "\000\002\020\010\000\002\004\004\000\002\004\003\000" +
    "\002\017\007\000\002\022\015\000\002\023\003\000\002" +
    "\023\003\000\002\024\011\000\002\025\012\000\002\026" +
    "\003\000\002\027\003\000\002\033\004\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\010\000\002\033" +
    "\006\000\002\033\011\000\002\033\010\000\002\033\010" +
    "\000\002\033\007\000\002\033\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\052\003\034\011\030\012\027\014\020\016" +
    "\043\017\017\020\052\021\036\022\014\025\053\032\005" +
    "\033\044\041\012\042\021\043\031\044\045\045\050\046" +
    "\016\056\047\103\025\001\002\000\004\023\u0138\001\002" +
    "\000\004\011\uffdb\001\002\000\004\023\u0137\001\002\000" +
    "\004\023\u0136\001\002\000\004\002\u0135\001\002\000\054" +
    "\002\000\003\034\011\030\012\027\014\020\016\043\017" +
    "\017\020\052\021\036\022\014\025\053\032\005\033\044" +
    "\041\012\042\021\043\031\044\045\045\050\046\016\056" +
    "\047\103\025\001\002\000\020\011\uffd9\023\uffd9\024\uffd9" +
    "\036\uffd9\060\uffd9\064\uffd9\075\uffd9\001\002\000\004\023" +
    "\u0134\001\002\000\004\023\uffb0\001\002\000\056\002\ufffe" +
    "\003\ufffe\011\ufffe\012\ufffe\014\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\025\ufffe\032\ufffe\033\ufffe\035\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\056" +
    "\ufffe\103\ufffe\001\002\000\020\011\uffd4\023\uffd4\024\uffd4" +
    "\036\uffd4\060\uffd4\064\uffd4\075\uffd4\001\002\000\004\057" +
    "\u0126\001\002\000\026\004\063\005\064\006\065\007\061" +
    "\010\071\011\066\030\060\057\062\062\057\102\067\001" +
    "\002\000\020\011\uffd8\023\uffd8\024\uffd8\036\uffd8\060\uffd8" +
    "\064\uffd8\075\uffd8\001\002\000\056\002\ufff7\003\ufff7\011" +
    "\ufff7\012\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\025\ufff7\032\ufff7\033\ufff7\035\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\056\ufff7\103\ufff7" +
    "\001\002\000\056\002\ufff8\003\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\025\ufff8" +
    "\032\ufff8\033\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\056\ufff8\103\ufff8\001\002\000\004" +
    "\023\u0113\001\002\000\004\011\u0107\001\002\000\004\011" +
    "\334\001\002\000\004\057\321\001\002\000\014\026\255" +
    "\036\252\061\251\062\253\064\250\001\002\000\020\011" +
    "\uffd6\023\uffd6\024\uffd6\036\uffd6\060\uffd6\064\uffd6\075\uffd6" +
    "\001\002\000\056\002\ufff0\003\ufff0\011\ufff0\012\ufff0\014" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0" +
    "\032\ufff0\033\ufff0\035\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\056\ufff0\103\ufff0\001\002\000\056" +
    "\002\ufff9\003\ufff9\011\ufff9\012\ufff9\014\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\025\ufff9\032\ufff9\033\ufff9" +
    "\035\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\056\ufff9\103\ufff9\001\002\000\060\002\uffed\003\uffed" +
    "\011\uffed\012\uffed\014\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\247\025\uffed\032\uffed\033\uffed\035\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\056" +
    "\uffed\103\uffed\001\002\000\004\023\246\001\002\000\004" +
    "\023\uffb1\001\002\000\056\002\ufff6\003\ufff6\011\ufff6\012" +
    "\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\025\ufff6\032\ufff6\033\ufff6\035\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\056\ufff6\103\ufff6\001\002" +
    "\000\004\023\245\001\002\000\004\023\244\001\002\000" +
    "\004\023\243\001\002\000\004\057\235\001\002\000\004" +
    "\011\uffda\001\002\000\020\011\uffd7\023\uffd7\024\uffd7\036" +
    "\uffd7\060\uffd7\064\uffd7\075\uffd7\001\002\000\004\011\212" +
    "\001\002\000\004\011\176\001\002\000\020\011\uffd5\023" +
    "\uffd5\024\uffd5\036\uffd5\060\uffd5\064\uffd5\075\uffd5\001\002" +
    "\000\004\023\175\001\002\000\004\034\165\001\002\000" +
    "\004\026\054\001\002\000\004\027\055\001\002\000\004" +
    "\057\056\001\002\000\026\004\063\005\064\006\065\007" +
    "\061\010\071\011\066\030\060\057\062\062\057\102\067" +
    "\001\002\000\026\004\063\005\064\006\065\007\061\010" +
    "\071\011\066\030\060\057\062\062\057\102\067\001\002" +
    "\000\004\057\157\001\002\000\060\023\uff9b\031\uff9b\034" +
    "\uff9b\035\uff9b\037\uff9b\040\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b" +
    "\101\uff9b\001\002\000\026\004\063\005\064\006\065\007" +
    "\061\010\071\011\066\030\060\057\062\062\057\102\067" +
    "\001\002\000\060\023\uff9e\031\uff9e\034\uff9e\035\uff9e\037" +
    "\uff9e\040\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074" +
    "\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\001\002" +
    "\000\060\023\uff9d\031\uff9d\034\uff9d\035\uff9d\037\uff9d\040" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\001\002\000\060" +
    "\023\uff9c\031\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\001\002\000\064\023\uff99" +
    "\026\133\031\uff99\034\uff99\035\uff99\036\132\037\uff99\040" +
    "\uff99\060\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075" +
    "\uff99\076\uff99\077\uff99\100\uff99\101\uff99\001\002\000\026" +
    "\004\063\005\064\006\065\007\061\010\071\011\066\030" +
    "\060\057\062\062\057\102\067\001\002\000\042\060\074" +
    "\061\077\062\072\065\111\066\103\067\104\070\100\071" +
    "\101\072\110\073\102\074\076\075\105\076\075\077\106" +
    "\100\107\101\073\001\002\000\060\023\uff9a\031\uff9a\034" +
    "\uff9a\035\uff9a\037\uff9a\040\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\001\002\000\026\004\063\005\064\006\065\007" +
    "\061\010\071\011\066\030\060\057\062\062\057\102\067" +
    "\001\002\000\026\004\063\005\064\006\065\007\061\010" +
    "\071\011\066\030\060\057\062\062\057\102\067\001\002" +
    "\000\004\023\uffdc\001\002\000\026\004\063\005\064\006" +
    "\065\007\061\010\071\011\066\030\060\057\062\062\057" +
    "\102\067\001\002\000\026\004\063\005\064\006\065\007" +
    "\061\010\071\011\066\030\060\057\062\062\057\102\067" +
    "\001\002\000\026\004\063\005\064\006\065\007\061\010" +
    "\071\011\066\030\060\057\062\062\057\102\067\001\002" +
    "\000\026\004\063\005\064\006\065\007\061\010\071\011" +
    "\066\030\060\057\062\062\057\102\067\001\002\000\026" +
    "\004\063\005\064\006\065\007\061\010\071\011\066\030" +
    "\060\057\062\062\057\102\067\001\002\000\026\004\063" +
    "\005\064\006\065\007\061\010\071\011\066\030\060\057" +
    "\062\062\057\102\067\001\002\000\026\004\063\005\064" +
    "\006\065\007\061\010\071\011\066\030\060\057\062\062" +
    "\057\102\067\001\002\000\026\004\063\005\064\006\065" +
    "\007\061\010\071\011\066\030\060\057\062\062\057\102" +
    "\067\001\002\000\026\004\063\005\064\006\065\007\061" +
    "\010\071\011\066\030\060\057\062\062\057\102\067\001" +
    "\002\000\026\004\063\005\064\006\065\007\061\010\071" +
    "\011\066\030\060\057\062\062\057\102\067\001\002\000" +
    "\026\004\063\005\064\006\065\007\061\010\071\011\066" +
    "\030\060\057\062\062\057\102\067\001\002\000\026\004" +
    "\063\005\064\006\065\007\061\010\071\011\066\030\060" +
    "\057\062\062\057\102\067\001\002\000\026\004\063\005" +
    "\064\006\065\007\061\010\071\011\066\030\060\057\062" +
    "\062\057\102\067\001\002\000\060\023\uffac\031\uffac\034" +
    "\uffac\035\uffac\037\uffac\040\uffac\060\uffac\061\uffac\062\uffac" +
    "\064\uffac\065\uffac\066\uffac\067\104\070\100\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac" +
    "\101\uffac\001\002\000\060\023\uffa7\031\uffa7\034\uffa7\035" +
    "\uffa7\037\uffa7\040\uffa7\060\uffa7\061\077\062\072\064\uffa7" +
    "\065\111\066\103\067\104\070\100\071\101\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7" +
    "\001\002\000\060\023\uffa0\031\uffa0\034\uffa0\035\uffa0\037" +
    "\uffa0\040\uffa0\060\uffa0\061\077\062\072\064\uffa0\065\111" +
    "\066\103\067\104\070\100\071\101\072\110\073\102\074" +
    "\076\075\105\076\075\077\106\100\uffa0\101\073\001\002" +
    "\000\060\023\uffa2\031\uffa2\034\uffa2\035\uffa2\037\uffa2\040" +
    "\uffa2\060\uffa2\061\077\062\072\064\uffa2\065\111\066\103" +
    "\067\104\070\100\071\101\072\uffa2\073\uffa2\074\uffa2\075" +
    "\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\001\002\000\060" +
    "\023\uffa4\031\uffa4\034\uffa4\035\uffa4\037\uffa4\040\uffa4\060" +
    "\uffa4\061\077\062\072\064\uffa4\065\111\066\103\067\104" +
    "\070\100\071\101\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\001\002\000\054\023\uffaa" +
    "\031\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\001\002\000\060\023\uffab\031\uffab\034\uffab\035\uffab" +
    "\037\uffab\040\uffab\060\uffab\061\uffab\062\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\104\070\100\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\001" +
    "\002\000\060\023\uffa6\031\uffa6\034\uffa6\035\uffa6\037\uffa6" +
    "\040\uffa6\060\uffa6\061\077\062\072\064\uffa6\065\111\066" +
    "\103\067\104\070\100\071\101\072\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\001\002\000" +
    "\060\023\uffa8\031\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\104\070\100\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\100\uffa8\101\uffa8\001\002\000\054\023" +
    "\uffa9\031\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\071\uffa9\072" +
    "\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9" +
    "\101\uffa9\001\002\000\060\023\uffae\031\uffae\034\uffae\035" +
    "\uffae\037\uffae\040\uffae\060\uffae\061\uffae\062\uffae\064\uffae" +
    "\065\111\066\103\067\104\070\100\071\101\072\uffae\073" +
    "\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\001\002\000\060\023\uffa5\031\uffa5\034\uffa5\035\uffa5\037" +
    "\uffa5\040\uffa5\060\uffa5\061\077\062\072\064\uffa5\065\111" +
    "\066\103\067\104\070\100\071\101\072\uffa5\073\uffa5\074" +
    "\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\001\002" +
    "\000\060\023\uffa3\031\uffa3\034\uffa3\035\uffa3\037\uffa3\040" +
    "\uffa3\060\uffa3\061\077\062\072\064\uffa3\065\111\066\103" +
    "\067\104\070\100\071\101\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\001\002\000\060" +
    "\023\uffa1\031\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\060" +
    "\uffa1\061\077\062\072\064\uffa1\065\111\066\103\067\104" +
    "\070\100\071\101\072\110\073\102\074\076\075\105\076" +
    "\075\077\106\100\uffa1\101\uffa1\001\002\000\060\023\uffad" +
    "\031\uffad\034\uffad\035\uffad\037\uffad\040\uffad\060\uffad\061" +
    "\uffad\062\uffad\064\uffad\065\111\066\103\067\104\070\100" +
    "\071\101\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077" +
    "\uffad\100\uffad\101\uffad\001\002\000\060\023\uff9f\031\uff9f" +
    "\034\uff9f\035\uff9f\037\uff9f\040\uff9f\060\uff9f\061\077\062" +
    "\072\064\uff9f\065\111\066\103\067\104\070\100\071\101" +
    "\072\110\073\102\074\076\075\105\076\075\077\106\100" +
    "\uff9f\101\uff9f\001\002\000\026\004\063\005\064\006\065" +
    "\007\061\010\071\011\066\030\060\057\062\062\057\102" +
    "\067\001\002\000\012\011\135\051\134\053\137\054\136" +
    "\001\002\000\004\057\145\001\002\000\060\023\uff92\031" +
    "\uff92\034\uff92\035\uff92\037\uff92\040\uff92\060\uff92\061\uff92" +
    "\062\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071" +
    "\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92" +
    "\100\uff92\101\uff92\001\002\000\004\057\143\001\002\000" +
    "\004\057\140\001\002\000\026\004\063\005\064\006\065" +
    "\007\061\010\071\011\066\030\060\057\062\062\057\102" +
    "\067\001\002\000\042\060\142\061\077\062\072\065\111" +
    "\066\103\067\104\070\100\071\101\072\110\073\102\074" +
    "\076\075\105\076\075\077\106\100\107\101\073\001\002" +
    "\000\060\023\uff94\031\uff94\034\uff94\035\uff94\037\uff94\040" +
    "\uff94\060\uff94\061\uff94\062\uff94\064\uff94\065\uff94\066\uff94" +
    "\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075" +
    "\uff94\076\uff94\077\uff94\100\uff94\101\uff94\001\002\000\004" +
    "\060\144\001\002\000\060\023\uff93\031\uff93\034\uff93\035" +
    "\uff93\037\uff93\040\uff93\060\uff93\061\uff93\062\uff93\064\uff93" +
    "\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073" +
    "\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93" +
    "\001\002\000\026\004\063\005\064\006\065\007\061\010" +
    "\071\011\066\030\060\057\062\062\057\102\067\001\002" +
    "\000\042\060\147\061\077\062\072\065\111\066\103\067" +
    "\104\070\100\071\101\072\110\073\102\074\076\075\105" +
    "\076\075\077\106\100\107\101\073\001\002\000\060\023" +
    "\uff95\031\uff95\034\uff95\035\uff95\037\uff95\040\uff95\060\uff95" +
    "\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95" +
    "\077\uff95\100\uff95\101\uff95\001\002\000\042\037\151\061" +
    "\077\062\072\065\111\066\103\067\104\070\100\071\101" +
    "\072\110\073\102\074\076\075\105\076\075\077\106\100" +
    "\107\101\073\001\002\000\062\023\uff97\031\uff97\034\uff97" +
    "\035\uff97\036\152\037\uff97\040\uff97\060\uff97\061\uff97\062" +
    "\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97" +
    "\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100" +
    "\uff97\101\uff97\001\002\000\026\004\063\005\064\006\065" +
    "\007\061\010\071\011\066\030\060\057\062\062\057\102" +
    "\067\001\002\000\042\037\154\061\077\062\072\065\111" +
    "\066\103\067\104\070\100\071\101\072\110\073\102\074" +
    "\076\075\105\076\075\077\106\100\107\101\073\001\002" +
    "\000\060\023\uff96\031\uff96\034\uff96\035\uff96\037\uff96\040" +
    "\uff96\060\uff96\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96" +
    "\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075" +
    "\uff96\076\uff96\077\uff96\100\uff96\101\uff96\001\002\000\042" +
    "\060\156\061\077\062\072\065\111\066\103\067\104\070" +
    "\100\071\101\072\110\073\102\074\076\075\105\076\075" +
    "\077\106\100\107\101\073\001\002\000\060\023\uff91\031" +
    "\uff91\034\uff91\035\uff91\037\uff91\040\uff91\060\uff91\061\uff91" +
    "\062\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91" +
    "\100\uff91\101\uff91\001\002\000\026\004\063\005\064\006" +
    "\065\007\061\010\071\011\066\030\060\057\062\062\057" +
    "\102\067\001\002\000\042\031\161\061\077\062\072\065" +
    "\111\066\103\067\104\070\100\071\101\072\110\073\102" +
    "\074\076\075\105\076\075\077\106\100\107\101\073\001" +
    "\002\000\016\041\012\042\021\043\031\044\045\045\050" +
    "\046\016\001\002\000\004\060\163\001\002\000\060\023" +
    "\uff98\031\uff98\034\uff98\035\uff98\037\uff98\040\uff98\060\uff98" +
    "\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070" +
    "\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98" +
    "\077\uff98\100\uff98\101\uff98\001\002\000\060\023\uffaf\031" +
    "\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\100\uffaf\101\uffaf\001\002\000\052\003\034\011\030\012" +
    "\027\014\020\016\043\017\017\020\052\021\036\022\014" +
    "\025\053\032\005\033\044\041\012\042\021\043\031\044" +
    "\045\045\050\046\016\056\047\103\025\001\002\000\054" +
    "\003\034\011\030\012\027\014\020\016\043\017\017\020" +
    "\052\021\036\022\014\025\053\032\005\033\044\035\170" +
    "\041\012\042\021\043\031\044\045\045\050\046\016\056" +
    "\047\103\025\001\002\000\056\002\uffff\003\uffff\011\uffff" +
    "\012\uffff\014\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022" +
    "\uffff\025\uffff\032\uffff\033\uffff\035\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\046\uffff\056\uffff\103\uffff\001" +
    "\002\000\004\016\171\001\002\000\004\057\172\001\002" +
    "\000\026\004\063\005\064\006\065\007\061\010\071\011" +
    "\066\030\060\057\062\062\057\102\067\001\002\000\042" +
    "\060\174\061\077\062\072\065\111\066\103\067\104\070" +
    "\100\071\101\072\110\073\102\074\076\075\105\076\075" +
    "\077\106\100\107\101\073\001\002\000\004\023\uffb2\001" +
    "\002\000\056\002\ufffd\003\ufffd\011\ufffd\012\ufffd\014\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\025\ufffd\032" +
    "\ufffd\033\ufffd\035\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\056\ufffd\103\ufffd\001\002\000\004\034" +
    "\177\001\002\000\004\011\200\001\002\000\004\024\207" +
    "\001\002\000\006\011\202\035\203\001\002\000\004\024" +
    "\204\001\002\000\004\023\uffe4\001\002\000\016\041\012" +
    "\042\021\043\031\044\045\045\050\046\016\001\002\000" +
    "\004\023\206\001\002\000\006\011\uffe3\035\uffe3\001\002" +
    "\000\016\041\012\042\021\043\031\044\045\045\050\046" +
    "\016\001\002\000\004\023\211\001\002\000\006\011\uffe2" +
    "\035\uffe2\001\002\000\004\057\213\001\002\000\020\041" +
    "\012\042\021\043\031\044\045\045\050\046\016\060\215" +
    "\001\002\000\004\024\231\001\002\000\004\034\226\001" +
    "\002\000\006\040\220\060\221\001\002\000\006\040\uffe7" +
    "\060\uffe7\001\002\000\016\041\012\042\021\043\031\044" +
    "\045\045\050\046\016\001\002\000\004\034\222\001\002" +
    "\000\052\003\034\011\030\012\027\014\020\016\043\017" +
    "\017\020\052\021\036\022\014\025\053\032\005\033\044" +
    "\041\012\042\021\043\031\044\045\045\050\046\016\056" +
    "\047\103\025\001\002\000\054\003\034\011\030\012\027" +
    "\014\020\016\043\017\017\020\052\021\036\022\014\025" +
    "\053\032\005\033\044\035\224\041\012\042\021\043\031" +
    "\044\045\045\050\046\016\056\047\103\025\001\002\000" +
    "\056\002\uffd2\003\uffd2\011\uffd2\012\uffd2\014\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffd2\032\uffd2\033" +
    "\uffd2\035\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\056\uffd2\103\uffd2\001\002\000\006\040\uffe8\060" +
    "\uffe8\001\002\000\052\003\034\011\030\012\027\014\020" +
    "\016\043\017\017\020\052\021\036\022\014\025\053\032" +
    "\005\033\044\041\012\042\021\043\031\044\045\045\050" +
    "\046\016\056\047\103\025\001\002\000\054\003\034\011" +
    "\030\012\027\014\020\016\043\017\017\020\052\021\036" +
    "\022\014\025\053\032\005\033\044\035\230\041\012\042" +
    "\021\043\031\044\045\045\050\046\016\056\047\103\025" +
    "\001\002\000\056\002\uffd3\003\uffd3\011\uffd3\012\uffd3\014" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\025\uffd3" +
    "\032\uffd3\033\uffd3\035\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\056\uffd3\103\uffd3\001\002\000\004" +
    "\011\232\001\002\000\010\040\uffe5\060\uffe5\064\233\001" +
    "\002\000\026\004\063\005\064\006\065\007\061\010\071" +
    "\011\066\030\060\057\062\062\057\102\067\001\002\000" +
    "\044\040\uffe6\060\uffe6\061\077\062\072\065\111\066\103" +
    "\067\104\070\100\071\101\072\110\073\102\074\076\075" +
    "\105\076\075\077\106\100\107\101\073\001\002\000\026" +
    "\004\063\005\064\006\065\007\061\010\071\011\066\030" +
    "\060\057\062\062\057\102\067\001\002\000\042\060\237" +
    "\061\077\062\072\065\111\066\103\067\104\070\100\071" +
    "\101\072\110\073\102\074\076\075\105\076\075\077\106" +
    "\100\107\101\073\001\002\000\004\034\240\001\002\000" +
    "\052\003\034\011\030\012\027\014\020\016\043\017\017" +
    "\020\052\021\036\022\014\025\053\032\005\033\044\041" +
    "\012\042\021\043\031\044\045\045\050\046\016\056\047" +
    "\103\025\001\002\000\054\003\034\011\030\012\027\014" +
    "\020\016\043\017\017\020\052\021\036\022\014\025\053" +
    "\032\005\033\044\035\242\041\012\042\021\043\031\044" +
    "\045\045\050\046\016\056\047\103\025\001\002\000\056" +
    "\002\uffb3\003\uffb3\011\uffb3\012\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\025\uffb3\032\uffb3\033\uffb3" +
    "\035\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\056\uffb3\103\uffb3\001\002\000\056\002\ufff1\003\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\025\ufff1\032\ufff1\033\ufff1\035\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\056\ufff1\103" +
    "\ufff1\001\002\000\056\002\uffef\003\uffef\011\uffef\012\uffef" +
    "\014\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\025" +
    "\uffef\032\uffef\033\uffef\035\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\056\uffef\103\uffef\001\002\000" +
    "\056\002\ufffc\003\ufffc\011\ufffc\012\ufffc\014\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\025\ufffc\032\ufffc\033" +
    "\ufffc\035\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\056\ufffc\103\ufffc\001\002\000\056\002\ufff2\003" +
    "\ufff2\011\ufff2\012\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\025\ufff2\032\ufff2\033\ufff2\035\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\056\ufff2" +
    "\103\ufff2\001\002\000\056\002\uffee\003\uffee\011\uffee\012" +
    "\uffee\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\025\uffee\032\uffee\033\uffee\035\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\056\uffee\103\uffee\001\002" +
    "\000\026\004\063\005\064\006\065\007\061\010\071\011" +
    "\066\030\060\057\062\062\057\102\067\001\002\000\004" +
    "\061\317\001\002\000\026\004\063\005\064\006\065\007" +
    "\061\010\071\011\066\030\060\057\062\062\057\102\067" +
    "\001\002\000\004\062\305\001\002\000\006\023\uffbf\060" +
    "\uffbf\001\002\000\016\011\256\050\260\052\257\053\262" +
    "\054\263\055\261\001\002\000\004\064\303\001\002\000" +
    "\004\057\276\001\002\000\004\057\273\001\002\000\004" +
    "\057\271\001\002\000\004\057\266\001\002\000\004\057" +
    "\264\001\002\000\004\060\265\001\002\000\004\023\uffde" +
    "\001\002\000\026\004\063\005\064\006\065\007\061\010" +
    "\071\011\066\030\060\057\062\062\057\102\067\001\002" +
    "\000\042\060\270\061\077\062\072\065\111\066\103\067" +
    "\104\070\100\071\101\072\110\073\102\074\076\075\105" +
    "\076\075\077\106\100\107\101\073\001\002\000\004\023" +
    "\uffdf\001\002\000\004\060\272\001\002\000\004\023\uffdd" +
    "\001\002\000\026\004\063\005\064\006\065\007\061\010" +
    "\071\011\066\030\060\057\062\062\057\102\067\001\002" +
    "\000\042\060\275\061\077\062\072\065\111\066\103\067" +
    "\104\070\100\071\101\072\110\073\102\074\076\075\105" +
    "\076\075\077\106\100\107\101\073\001\002\000\004\023" +
    "\uffe1\001\002\000\026\004\063\005\064\006\065\007\061" +
    "\010\071\011\066\030\060\057\062\062\057\102\067\001" +
    "\002\000\042\040\300\061\077\062\072\065\111\066\103" +
    "\067\104\070\100\071\101\072\110\073\102\074\076\075" +
    "\105\076\075\077\106\100\107\101\073\001\002\000\026" +
    "\004\063\005\064\006\065\007\061\010\071\011\066\030" +
    "\060\057\062\062\057\102\067\001\002\000\042\060\302" +
    "\061\077\062\072\065\111\066\103\067\104\070\100\071" +
    "\101\072\110\073\102\074\076\075\105\076\075\077\106" +
    "\100\107\101\073\001\002\000\004\023\uffe0\001\002\000" +
    "\026\004\063\005\064\006\065\007\061\010\071\011\066" +
    "\030\060\057\062\062\057\102\067\001\002\000\042\023" +
    "\uffc7\061\077\062\072\065\111\066\103\067\104\070\100" +
    "\071\101\072\110\073\102\074\076\075\105\076\075\077" +
    "\106\100\107\101\073\001\002\000\006\023\uffc0\060\uffc0" +
    "\001\002\000\042\037\307\061\077\062\072\065\111\066" +
    "\103\067\104\070\100\071\101\072\110\073\102\074\076" +
    "\075\105\076\075\077\106\100\107\101\073\001\002\000" +
    "\006\036\311\064\310\001\002\000\026\004\063\005\064" +
    "\006\065\007\061\010\071\011\066\030\060\057\062\062" +
    "\057\102\067\001\002\000\026\004\063\005\064\006\065" +
    "\007\061\010\071\011\066\030\060\057\062\062\057\102" +
    "\067\001\002\000\042\037\313\061\077\062\072\065\111" +
    "\066\103\067\104\070\100\071\101\072\110\073\102\074" +
    "\076\075\105\076\075\077\106\100\107\101\073\001\002" +
    "\000\004\064\314\001\002\000\026\004\063\005\064\006" +
    "\065\007\061\010\071\011\066\030\060\057\062\062\057" +
    "\102\067\001\002\000\044\023\uffc2\060\uffc2\061\077\062" +
    "\072\065\111\066\103\067\104\070\100\071\101\072\110" +
    "\073\102\074\076\075\105\076\075\077\106\100\107\101" +
    "\073\001\002\000\044\023\uffc3\060\uffc3\061\077\062\072" +
    "\065\111\066\103\067\104\070\100\071\101\072\110\073" +
    "\102\074\076\075\105\076\075\077\106\100\107\101\073" +
    "\001\002\000\006\023\uffc1\060\uffc1\001\002\000\044\023" +
    "\uffc4\060\uffc4\061\077\062\072\065\111\066\103\067\104" +
    "\070\100\071\101\072\110\073\102\074\076\075\105\076" +
    "\075\077\106\100\107\101\073\001\002\000\026\004\063" +
    "\005\064\006\065\007\061\010\071\011\066\030\060\057" +
    "\062\062\057\102\067\001\002\000\042\060\323\061\077" +
    "\062\072\065\111\066\103\067\104\070\100\071\101\072" +
    "\110\073\102\074\076\075\105\076\075\077\106\100\107" +
    "\101\073\001\002\000\004\034\324\001\002\000\052\003" +
    "\034\011\030\012\027\014\020\016\043\017\017\020\052" +
    "\021\036\022\014\025\053\032\005\033\044\041\012\042" +
    "\021\043\031\044\045\045\050\046\016\056\047\103\025" +
    "\001\002\000\054\003\034\011\030\012\027\014\020\016" +
    "\043\017\017\020\052\021\036\022\014\025\053\032\005" +
    "\033\044\035\326\041\012\042\021\043\031\044\045\045" +
    "\050\046\016\056\047\103\025\001\002\000\060\002\uffbe" +
    "\003\uffbe\011\uffbe\012\uffbe\013\327\014\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\025\uffbe\032\uffbe\033\uffbe" +
    "\035\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\056\uffbe\103\uffbe\001\002\000\006\012\027\034\330" +
    "\001\002\000\052\003\034\011\030\012\027\014\020\016" +
    "\043\017\017\020\052\021\036\022\014\025\053\032\005" +
    "\033\044\041\012\042\021\043\031\044\045\045\050\046" +
    "\016\056\047\103\025\001\002\000\056\002\uffbd\003\uffbd" +
    "\011\uffbd\012\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\025\uffbd\032\uffbd\033\uffbd\035\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\056\uffbd\103" +
    "\uffbd\001\002\000\054\003\034\011\030\012\027\014\020" +
    "\016\043\017\017\020\052\021\036\022\014\025\053\032" +
    "\005\033\044\035\333\041\012\042\021\043\031\044\045" +
    "\045\050\046\016\056\047\103\025\001\002\000\056\002" +
    "\uffbc\003\uffbc\011\uffbc\012\uffbc\014\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\025\uffbc\032\uffbc\033\uffbc\035" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\056\uffbc\103\uffbc\001\002\000\004\024\335\001\002\000" +
    "\022\011\340\041\012\042\021\043\031\044\045\045\050" +
    "\046\016\047\337\001\002\000\010\023\uffcc\036\360\064" +
    "\357\001\002\000\004\074\354\001\002\000\004\064\341" +
    "\001\002\000\004\034\342\001\002\000\004\011\343\001" +
    "\002\000\004\024\352\001\002\000\006\035\345\040\346" +
    "\001\002\000\004\023\uffc8\001\002\000\004\011\347\001" +
    "\002\000\004\024\350\001\002\000\026\004\063\005\064" +
    "\006\065\007\061\010\071\011\066\030\060\057\062\062" +
    "\057\102\067\001\002\000\044\035\uffc6\040\uffc6\061\077" +
    "\062\072\065\111\066\103\067\104\070\100\071\101\072" +
    "\110\073\102\074\076\075\105\076\075\077\106\100\107" +
    "\101\073\001\002\000\026\004\063\005\064\006\065\007" +
    "\061\010\071\011\066\030\060\057\062\062\057\102\067" +
    "\001\002\000\044\035\uffc5\040\uffc5\061\077\062\072\065" +
    "\111\066\103\067\104\070\100\071\101\072\110\073\102" +
    "\074\076\075\105\076\075\077\106\100\107\101\073\001" +
    "\002\000\016\041\012\042\021\043\031\044\045\045\050" +
    "\046\016\001\002\000\004\075\356\001\002\000\004\023" +
    "\uffcb\001\002\000\026\004\063\005\064\006\065\007\061" +
    "\010\071\011\066\030\060\057\062\062\057\102\067\001" +
    "\002\000\004\037\361\001\002\000\006\036\363\064\362" +
    "\001\002\000\004\036\u0103\001\002\000\004\037\364\001" +
    "\002\000\004\064\365\001\002\000\004\036\366\001\002" +
    "\000\004\036\367\001\002\000\026\004\063\005\064\006" +
    "\065\007\061\010\071\011\066\030\060\057\062\062\057" +
    "\102\067\001\002\000\006\037\372\040\371\001\002\000" +
    "\004\036\373\001\002\000\004\023\uffc9\001\002\000\026" +
    "\004\063\005\064\006\065\007\061\010\071\011\066\030" +
    "\060\057\062\062\057\102\067\001\002\000\006\037\377" +
    "\040\376\001\002\000\044\037\uffd0\040\uffd0\061\077\062" +
    "\072\065\111\066\103\067\104\070\100\071\101\072\110" +
    "\073\102\074\076\075\105\076\075\077\106\100\107\101" +
    "\073\001\002\000\026\004\063\005\064\006\065\007\061" +
    "\010\071\011\066\030\060\057\062\062\057\102\067\001" +
    "\002\000\006\037\uffcf\040\uffcf\001\002\000\044\037\uffd1" +
    "\040\uffd1\061\077\062\072\065\111\066\103\067\104\070" +
    "\100\071\101\072\110\073\102\074\076\075\105\076\075" +
    "\077\106\100\107\101\073\001\002\000\006\037\u0102\040" +
    "\376\001\002\000\006\037\uffce\040\uffce\001\002\000\026" +
    "\004\063\005\064\006\065\007\061\010\071\011\066\030" +
    "\060\057\062\062\057\102\067\001\002\000\006\037\u0105" +
    "\040\376\001\002\000\004\023\uffca\001\002\000\042\023" +
    "\uffcd\061\077\062\072\065\111\066\103\067\104\070\100" +
    "\071\101\072\110\073\102\074\076\075\105\076\075\077" +
    "\106\100\107\101\073\001\002\000\004\057\u0108\001\002" +
    "\000\006\011\u0109\060\u010b\001\002\000\004\064\u0111\001" +
    "\002\000\006\040\u010c\060\u010d\001\002\000\004\023\uffec" +
    "\001\002\000\004\011\u010e\001\002\000\004\023\uffeb\001" +
    "\002\000\004\064\u010f\001\002\000\026\004\063\005\064" +
    "\006\065\007\061\010\071\011\066\030\060\057\062\062" +
    "\057\102\067\001\002\000\044\040\uffea\060\uffea\061\077" +
    "\062\072\065\111\066\103\067\104\070\100\071\101\072" +
    "\110\073\102\074\076\075\105\076\075\077\106\100\107" +
    "\101\073\001\002\000\026\004\063\005\064\006\065\007" +
    "\061\010\071\011\066\030\060\057\062\062\057\102\067" +
    "\001\002\000\044\040\uffe9\060\uffe9\061\077\062\072\065" +
    "\111\066\103\067\104\070\100\071\101\072\110\073\102" +
    "\074\076\075\105\076\075\077\106\100\107\101\073\001" +
    "\002\000\056\002\ufffa\003\ufffa\011\ufffa\012\ufffa\014\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\025\ufffa\032" +
    "\ufffa\033\ufffa\035\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\056\ufffa\103\ufffa\001\002\000\042\034" +
    "\u0115\061\077\062\072\065\111\066\103\067\104\070\100" +
    "\071\101\072\110\073\102\074\076\075\105\076\075\077" +
    "\106\100\107\101\073\001\002\000\030\004\063\005\064" +
    "\006\065\007\061\010\071\011\066\015\u0116\030\060\057" +
    "\062\062\057\102\067\001\002\000\004\064\u0121\001\002" +
    "\000\032\004\063\005\064\006\065\007\061\010\071\011" +
    "\066\015\u0116\030\060\035\u011f\057\062\062\057\102\067" +
    "\001\002\000\032\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\015\uffb8\030\uffb8\035\uffb8\057\uffb8\062\uffb8" +
    "\102\uffb8\001\002\000\042\061\077\062\072\064\u011a\065" +
    "\111\066\103\067\104\070\100\071\101\072\110\073\102" +
    "\074\076\075\105\076\075\077\106\100\107\101\073\001" +
    "\002\000\004\075\u011b\001\002\000\004\034\u011c\001\002" +
    "\000\052\003\034\011\030\012\027\014\020\016\043\017" +
    "\017\020\052\021\036\022\014\025\053\032\005\033\044" +
    "\041\012\042\021\043\031\044\045\045\050\046\016\056" +
    "\047\103\025\001\002\000\054\003\034\011\030\012\027" +
    "\014\020\016\043\017\017\020\052\021\036\022\014\025" +
    "\053\032\005\033\044\035\u011e\041\012\042\021\043\031" +
    "\044\045\045\050\046\016\056\047\103\025\001\002\000" +
    "\032\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\015\uffbb\030\uffbb\035\uffbb\057\uffbb\062\uffbb\102\uffbb\001" +
    "\002\000\056\002\uffb7\003\uffb7\011\uffb7\012\uffb7\014\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\025\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\056\uffb7\103\uffb7\001\002\000\032\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\015\uffb9" +
    "\030\uffb9\035\uffb9\057\uffb9\062\uffb9\102\uffb9\001\002\000" +
    "\004\075\u0122\001\002\000\004\034\u0123\001\002\000\052" +
    "\003\034\011\030\012\027\014\020\016\043\017\017\020" +
    "\052\021\036\022\014\025\053\032\005\033\044\041\012" +
    "\042\021\043\031\044\045\045\050\046\016\056\047\103" +
    "\025\001\002\000\054\003\034\011\030\012\027\014\020" +
    "\016\043\017\017\020\052\021\036\022\014\025\053\032" +
    "\005\033\044\035\u0125\041\012\042\021\043\031\044\045" +
    "\045\050\046\016\056\047\103\025\001\002\000\032\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\015\uffba" +
    "\030\uffba\035\uffba\057\uffba\062\uffba\102\uffba\001\002\000" +
    "\004\011\u0127\001\002\000\006\036\252\064\250\001\002" +
    "\000\004\023\u0129\001\002\000\026\004\063\005\064\006" +
    "\065\007\061\010\071\011\066\030\060\057\062\062\057" +
    "\102\067\001\002\000\042\023\u012b\061\077\062\072\065" +
    "\111\066\103\067\104\070\100\071\101\072\110\073\102" +
    "\074\076\075\105\076\075\077\106\100\107\101\073\001" +
    "\002\000\004\011\u012c\001\002\000\012\036\252\061\251" +
    "\062\253\064\250\001\002\000\004\060\uffb5\001\002\000" +
    "\004\060\uffb4\001\002\000\004\060\u0130\001\002\000\004" +
    "\034\u0131\001\002\000\052\003\034\011\030\012\027\014" +
    "\020\016\043\017\017\020\052\021\036\022\014\025\053" +
    "\032\005\033\044\041\012\042\021\043\031\044\045\045" +
    "\050\046\016\056\047\103\025\001\002\000\054\003\034" +
    "\011\030\012\027\014\020\016\043\017\017\020\052\021" +
    "\036\022\014\025\053\032\005\033\044\035\u0133\041\012" +
    "\042\021\043\031\044\045\045\050\046\016\056\047\103" +
    "\025\001\002\000\056\002\uffb6\003\uffb6\011\uffb6\012\uffb6" +
    "\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\025" +
    "\uffb6\032\uffb6\033\uffb6\035\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\056\uffb6\103\uffb6\001\002\000" +
    "\056\002\ufff5\003\ufff5\011\ufff5\012\ufff5\014\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\025\ufff5\032\ufff5\033" +
    "\ufff5\035\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\056\ufff5\103\ufff5\001\002\000\004\002\001\001" +
    "\002\000\056\002\ufffb\003\ufffb\011\ufffb\012\ufffb\014\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\025\ufffb\032" +
    "\ufffb\033\ufffb\035\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\056\ufffb\103\ufffb\001\002\000\056\002" +
    "\ufff3\003\ufff3\011\ufff3\012\ufff3\014\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\025\ufff3\032\ufff3\033\ufff3\035" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\056\ufff3\103\ufff3\001\002\000\056\002\ufff4\003\ufff4\011" +
    "\ufff4\012\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\025\ufff4\032\ufff4\033\ufff4\035\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\056\ufff4\103\ufff4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\052\002\007\003\010\011\014\012\050\013" +
    "\037\014\006\015\023\016\032\017\022\021\041\022\021" +
    "\024\036\025\012\026\003\027\005\030\034\031\031\032" +
    "\040\034\045\035\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\166\012\050\013\037\014\006\015\023" +
    "\016\032\017\022\021\041\022\021\024\036\025\012\026" +
    "\003\027\005\030\034\031\031\032\040\034\045\035\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\067\001\001" +
    "\000\004\033\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\127\001\001\000\004\033\126\001\001\000\002\001" +
    "\001\000\004\033\125\001\001\000\004\033\124\001\001" +
    "\000\004\033\123\001\001\000\004\033\122\001\001\000" +
    "\004\033\121\001\001\000\004\033\120\001\001\000\004" +
    "\033\117\001\001\000\004\033\116\001\001\000\004\033" +
    "\115\001\001\000\004\033\114\001\001\000\004\033\113" +
    "\001\001\000\004\033\112\001\001\000\004\033\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\157\001\001\000\002\001\001\000\004" +
    "\034\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\165\011\014\012\050\013\037" +
    "\014\006\015\023\016\032\017\022\021\041\022\021\024" +
    "\036\025\012\026\003\027\005\030\034\031\031\032\040" +
    "\034\045\035\025\001\001\000\046\011\166\012\050\013" +
    "\037\014\006\015\023\016\032\017\022\021\041\022\021" +
    "\024\036\025\012\026\003\027\005\030\034\031\031\032" +
    "\040\034\045\035\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\213\040\215\041\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\213\041\224\001\001\000" +
    "\002\001\001\000\050\003\222\011\014\012\050\013\037" +
    "\014\006\015\023\016\032\017\022\021\041\022\021\024" +
    "\036\025\012\026\003\027\005\030\034\031\031\032\040" +
    "\034\045\035\025\001\001\000\046\011\166\012\050\013" +
    "\037\014\006\015\023\016\032\017\022\021\041\022\021" +
    "\024\036\025\012\026\003\027\005\030\034\031\031\032" +
    "\040\034\045\035\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\226\011\014\012\050\013\037\014" +
    "\006\015\023\016\032\017\022\021\041\022\021\024\036" +
    "\025\012\026\003\027\005\030\034\031\031\032\040\034" +
    "\045\035\025\001\001\000\046\011\166\012\050\013\037" +
    "\014\006\015\023\016\032\017\022\021\041\022\021\024" +
    "\036\025\012\026\003\027\005\030\034\031\031\032\040" +
    "\034\045\035\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\233\001\001\000\002" +
    "\001\001\000\004\033\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\240\011\014\012\050\013\037" +
    "\014\006\015\023\016\032\017\022\021\041\022\021\024" +
    "\036\025\012\026\003\027\005\030\034\031\031\032\040" +
    "\034\045\035\025\001\001\000\046\011\166\012\050\013" +
    "\037\014\006\015\023\016\032\017\022\021\041\022\021" +
    "\024\036\025\012\026\003\027\005\030\034\031\031\032" +
    "\040\034\045\035\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\317\001\001\000\002" +
    "\001\001\000\004\033\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\276\001\001\000\002\001\001\000\004\033\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\315\001\001\000\004\033" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\324\011" +
    "\014\012\050\013\037\014\006\015\023\016\032\017\022" +
    "\021\041\022\021\024\036\025\012\026\003\027\005\030" +
    "\034\031\031\032\040\034\045\035\025\001\001\000\046" +
    "\011\166\012\050\013\037\014\006\015\023\016\032\017" +
    "\022\021\041\022\021\024\036\025\012\026\003\027\005" +
    "\030\034\031\031\032\040\034\045\035\025\001\001\000" +
    "\002\001\001\000\004\016\330\001\001\000\050\003\331" +
    "\011\014\012\050\013\037\014\006\015\023\016\032\017" +
    "\022\021\041\022\021\024\036\025\012\026\003\027\005" +
    "\030\034\031\031\032\040\034\045\035\025\001\001\000" +
    "\002\001\001\000\046\011\166\012\050\013\037\014\006" +
    "\015\023\016\032\017\022\021\041\022\021\024\036\025" +
    "\012\026\003\027\005\030\034\031\031\032\040\034\045" +
    "\035\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\350\001" +
    "\001\000\002\001\001\000\004\033\352\001\001\000\002" +
    "\001\001\000\004\034\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\367\001\001" +
    "\000\006\005\u0100\033\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\373\033\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0103\033\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u010f\001" +
    "\001\000\002\001\001\000\004\033\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\u0116\020\u0117\033\u0118\001\001\000\002\001\001\000\006" +
    "\020\u011f\033\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\u011c" +
    "\011\014\012\050\013\037\014\006\015\023\016\032\017" +
    "\022\021\041\022\021\024\036\025\012\026\003\027\005" +
    "\030\034\031\031\032\040\034\045\035\025\001\001\000" +
    "\046\011\166\012\050\013\037\014\006\015\023\016\032" +
    "\017\022\021\041\022\021\024\036\025\012\026\003\027" +
    "\005\030\034\031\031\032\040\034\045\035\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\u0123\011\014" +
    "\012\050\013\037\014\006\015\023\016\032\017\022\021" +
    "\041\022\021\024\036\025\012\026\003\027\005\030\034" +
    "\031\031\032\040\034\045\035\025\001\001\000\046\011" +
    "\166\012\050\013\037\014\006\015\023\016\032\017\022" +
    "\021\041\022\021\024\036\025\012\026\003\027\005\030" +
    "\034\031\031\032\040\034\045\035\025\001\001\000\002" +
    "\001\001\000\004\014\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0129\001\001\000\002\001\001" +
    "\000\010\014\u012c\015\u012d\023\u012e\001\001\000\004\036" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\u0131\011\014\012" +
    "\050\013\037\014\006\015\023\016\032\017\022\021\041" +
    "\022\021\024\036\025\012\026\003\027\005\030\034\031" +
    "\031\032\040\034\045\035\025\001\001\000\046\011\166" +
    "\012\050\013\037\014\006\015\023\016\032\017\022\021" +
    "\041\022\021\024\036\025\012\026\003\027\005\030\034" +
    "\031\031\032\040\034\045\035\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    Lexer lex;
    Parser(Lexer lex){this.lex = lex;}

    public LinkedList<CompError> sintacticErrors = new LinkedList<>();

    public void syntax_error(Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICR, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }

    public void unrecovered_syntax_error (Symbol s){
        sintacticErrors.add(new CompError(
            ErrorType.SINTACTICU, 
            "Component did not expect " + s.value,
            s.left,
            s.right
        ));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCTIONS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= PRINT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLARATION END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= ASSIGNMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= INCREMENT_DECREMENT END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= MATCH_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOP_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOP_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOP_DO END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= BREAKS END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= CONTINUES END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= LIST_INST END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= STRUCT_INST END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= METHOD 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= RUN_MAIN_INS END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= error END 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= error 
            {
              Instruction RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RUN_MAIN_INS ::= RUN_MAIN ID PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new RunMain(a, null, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RUN_MAIN_INS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RUN_MAIN_INS ::= RUN_MAIN ID PAR_START PARAMSCALL PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RunMain(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RUN_MAIN_INS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMSCALL ::= PARAMSCALL COMMA ID EQUALS EXPRESSION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", b);
                                                                hm2.put("exp", c);
                                                                RESULT = a;
                                                                RESULT.add(hm2);
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMSCALL ::= ID EQUALS EXPRESSION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id", a);
                                            hm.put("exp", b);
                                            RESULT = new LinkedList<HashMap>();
                                            RESULT.add(hm);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= PARAMS COMMA PARAM 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= PARAM 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAM ::= TYPE_RW COLON ID EQUALS EXPRESSION 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                var hm2 = new HashMap<String, Object>();
                                                hm2.put("type", a);
                                                hm2.put("id", b);
                                                hm2.put("exp", c);
                                                RESULT = hm2;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAM ::= TYPE_RW COLON ID 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            var hm = new HashMap<String, Object>();
                            hm.put("type", a);
                            hm.put("id", b);
                            hm.put("exp", null);
                            RESULT = hm;
                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STRUCT_INST ::= STRUCT ID BRA_START STRUCT_TYPES_LIST BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructDeclaration(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_INST",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STRUCT_TYPES_LIST ::= STRUCT_TYPES_LIST ID COLON TYPE_RW END 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(new StructTypeIns(b, c, bleft, bright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_TYPES_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STRUCT_TYPES_LIST ::= ID COLON TYPE_RW END 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new StructTypeIns(a, b, aleft, aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_TYPES_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIST_INST ::= ID DOT PUSH PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Push(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LIST_INST ::= ID DOT SET PAR_START EXPRESSION COMMA EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Set(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LIST_INST ::= ID DOT REMOVE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LIST_INST ::= ID DOT POP PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Pop(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LIST_INST ::= ID DOT REVERSE PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Reverse(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST_INST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRINT ::= CONSOLE DOT LOG PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MUTABILITY ::= CONST 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MUTABILITY ::= LET 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE_RW ::= INT_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.WHOLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE_RW ::= DOUBLE_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPE_RW ::= BOOL_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPE_RW ::= CHAR_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE_RW ::= STRING_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TYPE_RW ::= VOID_RW 
            {
              Type RESULT =null;
		 RESULT = new Type(dataType.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_RW",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD ::= TYPE_RW ID PAR_START PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Method(a, b, null, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD ::= TYPE_RW ID PAR_START PARAMS PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Method(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARRAY_DATA ::= ARRAY_DATA COMMA EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARRAY_DATA ::= EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DATA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARRAY2D_DATA ::= ARRAY2D_DATA COMMA SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARRAY2D_DATA ::= SBRA_START ARRAY_DATA SBRA_END 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruction>>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY2D_DATA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARATION ::= MUTABILITY ID COLON LIST LESS_THAN TYPE_RW GREATER_THAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ListDeclaration(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END EQUALS SBRA_START ARRAY_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARATION ::= MUTABILITY ID COLON TYPE_RW SBRA_START SBRA_END SBRA_START SBRA_END EQUALS SBRA_START ARRAY2D_DATA SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array2DDeclaration(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARATION ::= MUTABILITY ID COLON ID EQUALS BRA_START STRUCT_VALUES_LIST BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructInstanceIns(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARATION ::= ID DOT ID EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAssignment(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STRUCT_VALUES_LIST ::= STRUCT_VALUES_LIST COMMA ID COLON EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(new StructValue(b, c, bleft, bright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_VALUES_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STRUCT_VALUES_LIST ::= ID COLON EXPRESSION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new StructValue(a, b, aleft, aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_VALUES_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASSIGNMENT ::= ID EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrAssignment(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASSIGNMENT ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END EQUALS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arr2DAssignment(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COUNTER ::= PLUS PLUS 
            {
              String RESULT =null;
		 RESULT = "plus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COUNTER ::= MINUS MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COUNTER",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INCREMENT_DECREMENT ::= ID COUNTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementDecrement(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENT_DECREMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE IF_SENTENCE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Instruction> elseif = new LinkedList<>(); elseif.add(c); RESULT = new If(a, b, elseif, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_SENTENCE ::= IF PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END ELSE BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASE ::= EXPRESSION EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASE ::= DEFAULT EQUALS GREATER_THAN BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Default(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CASES ::= CASES CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASES ::= CASE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MATCH_SENTENCE ::= MATCH EXPRESSION BRA_START CASES BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LOOP_FOR ::= FOR PAR_START ASSIGNMENT END EXPRESSION END STEP_FOR PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STEP_FOR ::= ASSIGNMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STEP_FOR ::= INCREMENT_DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STEP_FOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LOOP_WHILE ::= WHILE PAR_START EXPRESSION PAR_END BRA_START INSTRUCTIONS BRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LOOP_DO ::= DO BRA_START INSTRUCTIONS BRA_END WHILE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_DO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BREAKS ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAKS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTINUES ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESSION ::= MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnitaryNegation(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Addition(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Substraction(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESSION ::= EXPRESSION MULTIPLICATION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplication(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESSION ::= EXPRESSION DIVISION EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESSION ::= EXPRESSION POWER EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Power(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESSION ::= EXPRESSION ROOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Root(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESSION ::= EXPRESSION MODULO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Modulo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESSION ::= EXPRESSION EQUALS_TO EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESSION ::= EXPRESSION NOT_EQUAL EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualsTo(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESSION ::= EXPRESSION LESS_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESSION ::= EXPRESSION GREATER_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESSION ::= EXPRESSION LESS_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESSION ::= EXPRESSION GREATER_EQUAL_THAN EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqualsThan(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESSION ::= EXPRESSION AND EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESSION ::= EXPRESSION OR EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESSION ::= NOT EXPRESSION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESSION ::= WHOLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Integer.parseInt(a),new Type(dataType.WHOLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESSION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a, new Type(dataType.STRING), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESSION ::= DOUBLE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(new Double(a),new Type(dataType.DOUBLE), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESSION ::= BOOLEAN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(Boolean.parseBoolean(a), new Type(dataType.BOOLEAN), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESSION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Native(a.charAt(0), new Type(dataType.CHAR), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESSION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Access(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESSION ::= CAST PAR_START EXPRESSION AS TYPE_RW PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cast(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrAccess(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESSION ::= ID SBRA_START EXPRESSION SBRA_END SBRA_START EXPRESSION SBRA_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Arr2DAccess(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESSION ::= ID DOT GET PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Get(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESSION ::= ID DOT REMOVE PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESSION ::= ID DOT POP PAR_START PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Pop(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESSION ::= ID DOT ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAccess(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESSION ::= PAR_START EXPRESSION PAR_END 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
